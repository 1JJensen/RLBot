// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rlbot {
namespace api {

namespace {

const ::google::protobuf::Descriptor* ControllerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControllerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rotator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rotator_reflection_ = NULL;
const ::google::protobuf::Descriptor* Touch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Touch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoostInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoostInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTickPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTickPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_game_5fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_game_5fdata_2eproto() {
  protobuf_AddDesc_game_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "game_data.proto");
  GOOGLE_CHECK(file != NULL);
  ControllerState_descriptor_ = file->message_type(0);
  static const int ControllerState_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, throttle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, steer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, jump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, boost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, handbrake_),
  };
  ControllerState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControllerState_descriptor_,
      ControllerState::internal_default_instance(),
      ControllerState_offsets_,
      -1,
      -1,
      -1,
      sizeof(ControllerState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControllerState, _internal_metadata_));
  Vector3_descriptor_ = file->message_type(1);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::internal_default_instance(),
      Vector3_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_));
  Rotator_descriptor_ = file->message_type(2);
  static const int Rotator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, roll_),
  };
  Rotator_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rotator_descriptor_,
      Rotator::internal_default_instance(),
      Rotator_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rotator),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rotator, _internal_metadata_));
  Touch_descriptor_ = file->message_type(3);
  static const int Touch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, game_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, normal_),
  };
  Touch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Touch_descriptor_,
      Touch::internal_default_instance(),
      Touch_offsets_,
      -1,
      -1,
      -1,
      sizeof(Touch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Touch, _internal_metadata_));
  ScoreInfo_descriptor_ = file->message_type(4);
  static const int ScoreInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, goals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, own_goals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, assists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, saves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, shots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, demolitions_),
  };
  ScoreInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScoreInfo_descriptor_,
      ScoreInfo::internal_default_instance(),
      ScoreInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ScoreInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _internal_metadata_));
  PlayerInfo_descriptor_ = file->message_type(5);
  static const int PlayerInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, score_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_demolished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_midair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_supersonic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, is_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, jumped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, double_jumped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, boost_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::internal_default_instance(),
      PlayerInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_));
  BallInfo_descriptor_ = file->message_type(6);
  static const int BallInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, angular_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, latest_touch_),
  };
  BallInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BallInfo_descriptor_,
      BallInfo::internal_default_instance(),
      BallInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BallInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallInfo, _internal_metadata_));
  BoostInfo_descriptor_ = file->message_type(7);
  static const int BoostInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, timer_),
  };
  BoostInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoostInfo_descriptor_,
      BoostInfo::internal_default_instance(),
      BoostInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoostInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoostInfo, _internal_metadata_));
  GameInfo_descriptor_ = file->message_type(8);
  static const int GameInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, seconds_elapsed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, game_time_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_overtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_unlimited_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_round_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_kickoff_pause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, is_match_ended_),
  };
  GameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::internal_default_instance(),
      GameInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _internal_metadata_));
  GameTickPacket_descriptor_ = file->message_type(9);
  static const int GameTickPacket_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, player_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, boost_pads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, game_info_),
  };
  GameTickPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GameTickPacket_descriptor_,
      GameTickPacket::internal_default_instance(),
      GameTickPacket_offsets_,
      -1,
      -1,
      -1,
      sizeof(GameTickPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTickPacket, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_game_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControllerState_descriptor_, ControllerState::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, Vector3::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rotator_descriptor_, Rotator::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Touch_descriptor_, Touch::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScoreInfo_descriptor_, ScoreInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, PlayerInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BallInfo_descriptor_, BallInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoostInfo_descriptor_, BoostInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameInfo_descriptor_, GameInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GameTickPacket_descriptor_, GameTickPacket::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_game_5fdata_2eproto() {
  ControllerState_default_instance_.Shutdown();
  delete ControllerState_reflection_;
  Vector3_default_instance_.Shutdown();
  delete Vector3_reflection_;
  Rotator_default_instance_.Shutdown();
  delete Rotator_reflection_;
  Touch_default_instance_.Shutdown();
  delete Touch_reflection_;
  ScoreInfo_default_instance_.Shutdown();
  delete ScoreInfo_reflection_;
  PlayerInfo_default_instance_.Shutdown();
  delete PlayerInfo_reflection_;
  BallInfo_default_instance_.Shutdown();
  delete BallInfo_reflection_;
  BoostInfo_default_instance_.Shutdown();
  delete BoostInfo_reflection_;
  GameInfo_default_instance_.Shutdown();
  delete GameInfo_reflection_;
  GameTickPacket_default_instance_.Shutdown();
  delete GameTickPacket_reflection_;
}

void protobuf_InitDefaults_game_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ControllerState_default_instance_.DefaultConstruct();
  Vector3_default_instance_.DefaultConstruct();
  Rotator_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Touch_default_instance_.DefaultConstruct();
  ScoreInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  PlayerInfo_default_instance_.DefaultConstruct();
  BallInfo_default_instance_.DefaultConstruct();
  BoostInfo_default_instance_.DefaultConstruct();
  GameInfo_default_instance_.DefaultConstruct();
  GameTickPacket_default_instance_.DefaultConstruct();
  ControllerState_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector3_default_instance_.get_mutable()->InitAsDefaultInstance();
  Rotator_default_instance_.get_mutable()->InitAsDefaultInstance();
  Touch_default_instance_.get_mutable()->InitAsDefaultInstance();
  ScoreInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  PlayerInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  BallInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  BoostInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  GameTickPacket_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_game_5fdata_2eproto_once_);
void protobuf_InitDefaults_game_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_game_5fdata_2eproto_once_,
                 &protobuf_InitDefaults_game_5fdata_2eproto_impl);
}
void protobuf_AddDesc_game_5fdata_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_game_5fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017game_data.proto\022\trlbot.api\"\214\001\n\017Control"
    "lerState\022\020\n\010throttle\030\001 \001(\002\022\r\n\005steer\030\002 \001("
    "\002\022\r\n\005pitch\030\003 \001(\002\022\013\n\003yaw\030\004 \001(\002\022\014\n\004roll\030\005 "
    "\001(\002\022\014\n\004jump\030\006 \001(\010\022\r\n\005boost\030\007 \001(\010\022\021\n\thand"
    "brake\030\010 \001(\010\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
    " \001(\002\022\t\n\001z\030\003 \001(\002\"3\n\007Rotator\022\r\n\005pitch\030\001 \001("
    "\002\022\013\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"|\n\005Touch\022\023\n"
    "\013player_name\030\001 \001(\t\022\024\n\014game_seconds\030\002 \001(\002"
    "\022$\n\010location\030\003 \001(\0132\022.rlbot.api.Vector3\022\""
    "\n\006normal\030\004 \001(\0132\022.rlbot.api.Vector3\"\200\001\n\tS"
    "coreInfo\022\r\n\005score\030\001 \001(\005\022\r\n\005goals\030\002 \001(\005\022\021"
    "\n\town_goals\030\003 \001(\005\022\017\n\007assists\030\004 \001(\005\022\r\n\005sa"
    "ves\030\005 \001(\005\022\r\n\005shots\030\006 \001(\005\022\023\n\013demolitions\030"
    "\007 \001(\005\"\371\002\n\nPlayerInfo\022$\n\010location\030\001 \001(\0132\022"
    ".rlbot.api.Vector3\022$\n\010rotation\030\002 \001(\0132\022.r"
    "lbot.api.Rotator\022$\n\010velocity\030\003 \001(\0132\022.rlb"
    "ot.api.Vector3\022,\n\020angular_velocity\030\004 \001(\013"
    "2\022.rlbot.api.Vector3\022(\n\nscore_info\030\005 \001(\013"
    "2\024.rlbot.api.ScoreInfo\022\025\n\ris_demolished\030"
    "\006 \001(\010\022\021\n\tis_midair\030\007 \001(\010\022\025\n\ris_supersoni"
    "c\030\010 \001(\010\022\016\n\006is_bot\030\t \001(\010\022\016\n\006jumped\030\n \001(\010\022"
    "\025\n\rdouble_jumped\030\013 \001(\010\022\014\n\004name\030\014 \001(\t\022\014\n\004"
    "team\030\r \001(\005\022\r\n\005boost\030\016 \001(\005\"\374\001\n\010BallInfo\022$"
    "\n\010location\030\001 \001(\0132\022.rlbot.api.Vector3\022$\n\010"
    "rotation\030\002 \001(\0132\022.rlbot.api.Rotator\022$\n\010ve"
    "locity\030\003 \001(\0132\022.rlbot.api.Vector3\022,\n\020angu"
    "lar_velocity\030\004 \001(\0132\022.rlbot.api.Vector3\022("
    "\n\014acceleration\030\005 \001(\0132\022.rlbot.api.Vector3"
    "\022&\n\014latest_touch\030\006 \001(\0132\020.rlbot.api.Touch"
    "\"S\n\tBoostInfo\022$\n\010location\030\001 \001(\0132\022.rlbot."
    "api.Vector3\022\021\n\tis_active\030\002 \001(\010\022\r\n\005timer\030"
    "\003 \001(\005\"\273\001\n\010GameInfo\022\027\n\017seconds_elapsed\030\001 "
    "\001(\002\022\033\n\023game_time_remaining\030\002 \001(\002\022\023\n\013is_o"
    "vertime\030\003 \001(\010\022\031\n\021is_unlimited_time\030\004 \001(\010"
    "\022\027\n\017is_round_active\030\005 \001(\010\022\030\n\020is_kickoff_"
    "pause\030\006 \001(\010\022\026\n\016is_match_ended\030\007 \001(\010\"\303\001\n\016"
    "GameTickPacket\022&\n\007players\030\001 \003(\0132\025.rlbot."
    "api.PlayerInfo\022\024\n\014player_index\030\002 \001(\005\022(\n\n"
    "boost_pads\030\003 \003(\0132\024.rlbot.api.BoostInfo\022!"
    "\n\004ball\030\004 \001(\0132\023.rlbot.api.BallInfo\022&\n\tgam"
    "e_info\030\005 \001(\0132\023.rlbot.api.GameInfo2T\n\003Bot"
    "\022M\n\022GetControllerState\022\031.rlbot.api.GameT"
    "ickPacket\032\032.rlbot.api.ControllerState\"\000b"
    "\006proto3", 1727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game_data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_5fdata_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_game_5fdata_2eproto_once_);
void protobuf_AddDesc_game_5fdata_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_game_5fdata_2eproto_once_,
                 &protobuf_AddDesc_game_5fdata_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_5fdata_2eproto {
  StaticDescriptorInitializer_game_5fdata_2eproto() {
    protobuf_AddDesc_game_5fdata_2eproto();
  }
} static_descriptor_initializer_game_5fdata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerState::kThrottleFieldNumber;
const int ControllerState::kSteerFieldNumber;
const int ControllerState::kPitchFieldNumber;
const int ControllerState::kYawFieldNumber;
const int ControllerState::kRollFieldNumber;
const int ControllerState::kJumpFieldNumber;
const int ControllerState::kBoostFieldNumber;
const int ControllerState::kHandbrakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerState::ControllerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.ControllerState)
}

void ControllerState::InitAsDefaultInstance() {
}

ControllerState::ControllerState(const ControllerState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.ControllerState)
}

void ControllerState::SharedCtor() {
  ::memset(&throttle_, 0, reinterpret_cast<char*>(&handbrake_) -
    reinterpret_cast<char*>(&throttle_) + sizeof(handbrake_));
  _cached_size_ = 0;
}

ControllerState::~ControllerState() {
  // @@protoc_insertion_point(destructor:rlbot.api.ControllerState)
  SharedDtor();
}

void ControllerState::SharedDtor() {
}

void ControllerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControllerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControllerState_descriptor_;
}

const ControllerState& ControllerState::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ControllerState> ControllerState_default_instance_;

ControllerState* ControllerState::New(::google::protobuf::Arena* arena) const {
  ControllerState* n = new ControllerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControllerState::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.ControllerState)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControllerState, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControllerState*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(throttle_, handbrake_);

#undef ZR_HELPER_
#undef ZR_

}

bool ControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.ControllerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float throttle = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_steer;
        break;
      }

      // optional float steer = 2;
      case 2: {
        if (tag == 21) {
         parse_steer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_pitch;
        break;
      }

      // optional float pitch = 3;
      case 3: {
        if (tag == 29) {
         parse_pitch:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_yaw;
        break;
      }

      // optional float yaw = 4;
      case 4: {
        if (tag == 37) {
         parse_yaw:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_roll;
        break;
      }

      // optional float roll = 5;
      case 5: {
        if (tag == 45) {
         parse_roll:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_jump;
        break;
      }

      // optional bool jump = 6;
      case 6: {
        if (tag == 48) {
         parse_jump:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jump_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_boost;
        break;
      }

      // optional bool boost = 7;
      case 7: {
        if (tag == 56) {
         parse_boost:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boost_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_handbrake;
        break;
      }

      // optional bool handbrake = 8;
      case 8: {
        if (tag == 64) {
         parse_handbrake:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &handbrake_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.ControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.ControllerState)
  return false;
#undef DO_
}

void ControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.ControllerState)
  // optional float throttle = 1;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->throttle(), output);
  }

  // optional float steer = 2;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->steer(), output);
  }

  // optional float pitch = 3;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pitch(), output);
  }

  // optional float yaw = 4;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yaw(), output);
  }

  // optional float roll = 5;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll(), output);
  }

  // optional bool jump = 6;
  if (this->jump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->jump(), output);
  }

  // optional bool boost = 7;
  if (this->boost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->boost(), output);
  }

  // optional bool handbrake = 8;
  if (this->handbrake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->handbrake(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.ControllerState)
}

::google::protobuf::uint8* ControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.ControllerState)
  // optional float throttle = 1;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->throttle(), target);
  }

  // optional float steer = 2;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->steer(), target);
  }

  // optional float pitch = 3;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pitch(), target);
  }

  // optional float yaw = 4;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yaw(), target);
  }

  // optional float roll = 5;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll(), target);
  }

  // optional bool jump = 6;
  if (this->jump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->jump(), target);
  }

  // optional bool boost = 7;
  if (this->boost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->boost(), target);
  }

  // optional bool handbrake = 8;
  if (this->handbrake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->handbrake(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.ControllerState)
  return target;
}

size_t ControllerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.ControllerState)
  size_t total_size = 0;

  // optional float throttle = 1;
  if (this->throttle() != 0) {
    total_size += 1 + 4;
  }

  // optional float steer = 2;
  if (this->steer() != 0) {
    total_size += 1 + 4;
  }

  // optional float pitch = 3;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // optional float yaw = 4;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // optional float roll = 5;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  // optional bool jump = 6;
  if (this->jump() != 0) {
    total_size += 1 + 1;
  }

  // optional bool boost = 7;
  if (this->boost() != 0) {
    total_size += 1 + 1;
  }

  // optional bool handbrake = 8;
  if (this->handbrake() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControllerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.ControllerState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ControllerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControllerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.ControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.ControllerState)
    UnsafeMergeFrom(*source);
  }
}

void ControllerState::MergeFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.ControllerState)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ControllerState::UnsafeMergeFrom(const ControllerState& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.steer() != 0) {
    set_steer(from.steer());
  }
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
  if (from.jump() != 0) {
    set_jump(from.jump());
  }
  if (from.boost() != 0) {
    set_boost(from.boost());
  }
  if (from.handbrake() != 0) {
    set_handbrake(from.handbrake());
  }
}

void ControllerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.ControllerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControllerState::CopyFrom(const ControllerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.ControllerState)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ControllerState::IsInitialized() const {

  return true;
}

void ControllerState::Swap(ControllerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControllerState::InternalSwap(ControllerState* other) {
  std::swap(throttle_, other->throttle_);
  std::swap(steer_, other->steer_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(roll_, other->roll_);
  std::swap(jump_, other->jump_);
  std::swap(boost_, other->boost_);
  std::swap(handbrake_, other->handbrake_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControllerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControllerState_descriptor_;
  metadata.reflection = ControllerState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControllerState

// optional float throttle = 1;
void ControllerState::clear_throttle() {
  throttle_ = 0;
}
float ControllerState::throttle() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.throttle)
  return throttle_;
}
void ControllerState::set_throttle(float value) {
  
  throttle_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.throttle)
}

// optional float steer = 2;
void ControllerState::clear_steer() {
  steer_ = 0;
}
float ControllerState::steer() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.steer)
  return steer_;
}
void ControllerState::set_steer(float value) {
  
  steer_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.steer)
}

// optional float pitch = 3;
void ControllerState::clear_pitch() {
  pitch_ = 0;
}
float ControllerState::pitch() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.pitch)
  return pitch_;
}
void ControllerState::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.pitch)
}

// optional float yaw = 4;
void ControllerState::clear_yaw() {
  yaw_ = 0;
}
float ControllerState::yaw() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.yaw)
  return yaw_;
}
void ControllerState::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.yaw)
}

// optional float roll = 5;
void ControllerState::clear_roll() {
  roll_ = 0;
}
float ControllerState::roll() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.roll)
  return roll_;
}
void ControllerState::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.roll)
}

// optional bool jump = 6;
void ControllerState::clear_jump() {
  jump_ = false;
}
bool ControllerState::jump() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.jump)
  return jump_;
}
void ControllerState::set_jump(bool value) {
  
  jump_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.jump)
}

// optional bool boost = 7;
void ControllerState::clear_boost() {
  boost_ = false;
}
bool ControllerState::boost() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.boost)
  return boost_;
}
void ControllerState::set_boost(bool value) {
  
  boost_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.boost)
}

// optional bool handbrake = 8;
void ControllerState::clear_handbrake() {
  handbrake_ = false;
}
bool ControllerState::handbrake() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ControllerState.handbrake)
  return handbrake_;
}
void ControllerState::set_handbrake(bool value) {
  
  handbrake_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ControllerState.handbrake)
}

inline const ControllerState* ControllerState::internal_default_instance() {
  return &ControllerState_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Vector3)
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:rlbot.api.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3> Vector3_default_instance_;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.Vector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Vector3)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Vector3)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.Vector3)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.Vector3)
    UnsafeMergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.Vector3)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3::UnsafeMergeFrom(const Vector3& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.Vector3)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional float x = 1;
void Vector3::clear_x() {
  x_ = 0;
}
float Vector3::x() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Vector3.x)
  return x_;
}
void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Vector3.x)
}

// optional float y = 2;
void Vector3::clear_y() {
  y_ = 0;
}
float Vector3::y() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Vector3.y)
  return y_;
}
void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Vector3.y)
}

// optional float z = 3;
void Vector3::clear_z() {
  z_ = 0;
}
float Vector3::z() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Vector3.z)
  return z_;
}
void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Vector3.z)
}

inline const Vector3* Vector3::internal_default_instance() {
  return &Vector3_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rotator::kPitchFieldNumber;
const int Rotator::kYawFieldNumber;
const int Rotator::kRollFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rotator::Rotator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Rotator)
}

void Rotator::InitAsDefaultInstance() {
}

Rotator::Rotator(const Rotator& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Rotator)
}

void Rotator::SharedCtor() {
  ::memset(&pitch_, 0, reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(roll_));
  _cached_size_ = 0;
}

Rotator::~Rotator() {
  // @@protoc_insertion_point(destructor:rlbot.api.Rotator)
  SharedDtor();
}

void Rotator::SharedDtor() {
}

void Rotator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rotator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rotator_descriptor_;
}

const Rotator& Rotator::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Rotator> Rotator_default_instance_;

Rotator* Rotator::New(::google::protobuf::Arena* arena) const {
  Rotator* n = new Rotator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rotator::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.Rotator)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rotator, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rotator*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pitch_, roll_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rotator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Rotator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float pitch = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_yaw;
        break;
      }

      // optional float yaw = 2;
      case 2: {
        if (tag == 21) {
         parse_yaw:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // optional float roll = 3;
      case 3: {
        if (tag == 29) {
         parse_roll:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Rotator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Rotator)
  return false;
#undef DO_
}

void Rotator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Rotator)
  // optional float pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pitch(), output);
  }

  // optional float yaw = 2;
  if (this->yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw(), output);
  }

  // optional float roll = 3;
  if (this->roll() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.Rotator)
}

::google::protobuf::uint8* Rotator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Rotator)
  // optional float pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pitch(), target);
  }

  // optional float yaw = 2;
  if (this->yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw(), target);
  }

  // optional float roll = 3;
  if (this->roll() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Rotator)
  return target;
}

size_t Rotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.Rotator)
  size_t total_size = 0;

  // optional float pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 + 4;
  }

  // optional float yaw = 2;
  if (this->yaw() != 0) {
    total_size += 1 + 4;
  }

  // optional float roll = 3;
  if (this->roll() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rotator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.Rotator)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Rotator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rotator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.Rotator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.Rotator)
    UnsafeMergeFrom(*source);
  }
}

void Rotator::MergeFrom(const Rotator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.Rotator)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Rotator::UnsafeMergeFrom(const Rotator& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.yaw() != 0) {
    set_yaw(from.yaw());
  }
  if (from.roll() != 0) {
    set_roll(from.roll());
  }
}

void Rotator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.Rotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rotator::CopyFrom(const Rotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.Rotator)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Rotator::IsInitialized() const {

  return true;
}

void Rotator::Swap(Rotator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rotator::InternalSwap(Rotator* other) {
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(roll_, other->roll_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rotator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rotator_descriptor_;
  metadata.reflection = Rotator_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rotator

// optional float pitch = 1;
void Rotator::clear_pitch() {
  pitch_ = 0;
}
float Rotator::pitch() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Rotator.pitch)
  return pitch_;
}
void Rotator::set_pitch(float value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Rotator.pitch)
}

// optional float yaw = 2;
void Rotator::clear_yaw() {
  yaw_ = 0;
}
float Rotator::yaw() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Rotator.yaw)
  return yaw_;
}
void Rotator::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Rotator.yaw)
}

// optional float roll = 3;
void Rotator::clear_roll() {
  roll_ = 0;
}
float Rotator::roll() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Rotator.roll)
  return roll_;
}
void Rotator::set_roll(float value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Rotator.roll)
}

inline const Rotator* Rotator::internal_default_instance() {
  return &Rotator_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Touch::kPlayerNameFieldNumber;
const int Touch::kGameSecondsFieldNumber;
const int Touch::kLocationFieldNumber;
const int Touch::kNormalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Touch::Touch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.Touch)
}

void Touch::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  normal_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
}

Touch::Touch(const Touch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.Touch)
}

void Touch::SharedCtor() {
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  normal_ = NULL;
  game_seconds_ = 0;
  _cached_size_ = 0;
}

Touch::~Touch() {
  // @@protoc_insertion_point(destructor:rlbot.api.Touch)
  SharedDtor();
}

void Touch::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Touch_default_instance_.get()) {
    delete location_;
    delete normal_;
  }
}

void Touch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Touch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Touch_descriptor_;
}

const Touch& Touch::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Touch> Touch_default_instance_;

Touch* Touch::New(::google::protobuf::Arena* arena) const {
  Touch* n = new Touch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Touch::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.Touch)
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_seconds_ = 0;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) delete normal_;
  normal_ = NULL;
}

bool Touch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.Touch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string player_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rlbot.api.Touch.player_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_game_seconds;
        break;
      }

      // optional float game_seconds = 2;
      case 2: {
        if (tag == 21) {
         parse_game_seconds:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_seconds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }

      // optional .rlbot.api.Vector3 location = 3;
      case 3: {
        if (tag == 26) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_normal;
        break;
      }

      // optional .rlbot.api.Vector3 normal = 4;
      case 4: {
        if (tag == 34) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.Touch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.Touch)
  return false;
#undef DO_
}

void Touch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.Touch)
  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.Touch.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->player_name(), output);
  }

  // optional float game_seconds = 2;
  if (this->game_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_seconds(), output);
  }

  // optional .rlbot.api.Vector3 location = 3;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->location_, output);
  }

  // optional .rlbot.api.Vector3 normal = 4;
  if (this->has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->normal_, output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.Touch)
}

::google::protobuf::uint8* Touch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.Touch)
  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.Touch.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player_name(), target);
  }

  // optional float game_seconds = 2;
  if (this->game_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_seconds(), target);
  }

  // optional .rlbot.api.Vector3 location = 3;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->location_, false, target);
  }

  // optional .rlbot.api.Vector3 normal = 4;
  if (this->has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->normal_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.Touch)
  return target;
}

size_t Touch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.Touch)
  size_t total_size = 0;

  // optional string player_name = 1;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->player_name());
  }

  // optional float game_seconds = 2;
  if (this->game_seconds() != 0) {
    total_size += 1 + 4;
  }

  // optional .rlbot.api.Vector3 location = 3;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional .rlbot.api.Vector3 normal = 4;
  if (this->has_normal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Touch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.Touch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Touch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Touch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.Touch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.Touch)
    UnsafeMergeFrom(*source);
  }
}

void Touch::MergeFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.Touch)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Touch::UnsafeMergeFrom(const Touch& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.game_seconds() != 0) {
    set_game_seconds(from.game_seconds());
  }
  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.has_normal()) {
    mutable_normal()->::rlbot::api::Vector3::MergeFrom(from.normal());
  }
}

void Touch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.Touch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Touch::CopyFrom(const Touch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.Touch)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Touch::IsInitialized() const {

  return true;
}

void Touch::Swap(Touch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Touch::InternalSwap(Touch* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(game_seconds_, other->game_seconds_);
  std::swap(location_, other->location_);
  std::swap(normal_, other->normal_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Touch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Touch_descriptor_;
  metadata.reflection = Touch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Touch

// optional string player_name = 1;
void Touch::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Touch::player_name() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Touch.player_name)
  return player_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Touch::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rlbot.api.Touch.player_name)
}
void Touch::set_player_name(const char* value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rlbot.api.Touch.player_name)
}
void Touch::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rlbot.api.Touch.player_name)
}
::std::string* Touch::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:rlbot.api.Touch.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Touch::release_player_name() {
  // @@protoc_insertion_point(field_release:rlbot.api.Touch.player_name)
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Touch::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.Touch.player_name)
}

// optional float game_seconds = 2;
void Touch::clear_game_seconds() {
  game_seconds_ = 0;
}
float Touch::game_seconds() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Touch.game_seconds)
  return game_seconds_;
}
void Touch::set_game_seconds(float value) {
  
  game_seconds_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.Touch.game_seconds)
}

// optional .rlbot.api.Vector3 location = 3;
bool Touch::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Touch::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::rlbot::api::Vector3& Touch::location() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Touch.location)
  return location_ != NULL ? *location_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* Touch::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.Touch.location)
  return location_;
}
::rlbot::api::Vector3* Touch::release_location() {
  // @@protoc_insertion_point(field_release:rlbot.api.Touch.location)
  
  ::rlbot::api::Vector3* temp = location_;
  location_ = NULL;
  return temp;
}
void Touch::set_allocated_location(::rlbot::api::Vector3* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.Touch.location)
}

// optional .rlbot.api.Vector3 normal = 4;
bool Touch::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
void Touch::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) delete normal_;
  normal_ = NULL;
}
const ::rlbot::api::Vector3& Touch::normal() const {
  // @@protoc_insertion_point(field_get:rlbot.api.Touch.normal)
  return normal_ != NULL ? *normal_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* Touch::mutable_normal() {
  
  if (normal_ == NULL) {
    normal_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.Touch.normal)
  return normal_;
}
::rlbot::api::Vector3* Touch::release_normal() {
  // @@protoc_insertion_point(field_release:rlbot.api.Touch.normal)
  
  ::rlbot::api::Vector3* temp = normal_;
  normal_ = NULL;
  return temp;
}
void Touch::set_allocated_normal(::rlbot::api::Vector3* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.Touch.normal)
}

inline const Touch* Touch::internal_default_instance() {
  return &Touch_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreInfo::kScoreFieldNumber;
const int ScoreInfo::kGoalsFieldNumber;
const int ScoreInfo::kOwnGoalsFieldNumber;
const int ScoreInfo::kAssistsFieldNumber;
const int ScoreInfo::kSavesFieldNumber;
const int ScoreInfo::kShotsFieldNumber;
const int ScoreInfo::kDemolitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreInfo::ScoreInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.ScoreInfo)
}

void ScoreInfo::InitAsDefaultInstance() {
}

ScoreInfo::ScoreInfo(const ScoreInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.ScoreInfo)
}

void ScoreInfo::SharedCtor() {
  ::memset(&score_, 0, reinterpret_cast<char*>(&demolitions_) -
    reinterpret_cast<char*>(&score_) + sizeof(demolitions_));
  _cached_size_ = 0;
}

ScoreInfo::~ScoreInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.ScoreInfo)
  SharedDtor();
}

void ScoreInfo::SharedDtor() {
}

void ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreInfo_descriptor_;
}

const ScoreInfo& ScoreInfo::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ScoreInfo> ScoreInfo_default_instance_;

ScoreInfo* ScoreInfo::New(::google::protobuf::Arena* arena) const {
  ScoreInfo* n = new ScoreInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.ScoreInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScoreInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScoreInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(score_, demolitions_);

#undef ZR_HELPER_
#undef ZR_

}

bool ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.ScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_goals;
        break;
      }

      // optional int32 goals = 2;
      case 2: {
        if (tag == 16) {
         parse_goals:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goals_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_own_goals;
        break;
      }

      // optional int32 own_goals = 3;
      case 3: {
        if (tag == 24) {
         parse_own_goals:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &own_goals_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_assists;
        break;
      }

      // optional int32 assists = 4;
      case 4: {
        if (tag == 32) {
         parse_assists:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_saves;
        break;
      }

      // optional int32 saves = 5;
      case 5: {
        if (tag == 40) {
         parse_saves:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saves_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_shots;
        break;
      }

      // optional int32 shots = 6;
      case 6: {
        if (tag == 48) {
         parse_shots:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shots_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_demolitions;
        break;
      }

      // optional int32 demolitions = 7;
      case 7: {
        if (tag == 56) {
         parse_demolitions:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demolitions_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.ScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.ScoreInfo)
  return false;
#undef DO_
}

void ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.ScoreInfo)
  // optional int32 score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 goals = 2;
  if (this->goals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goals(), output);
  }

  // optional int32 own_goals = 3;
  if (this->own_goals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->own_goals(), output);
  }

  // optional int32 assists = 4;
  if (this->assists() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assists(), output);
  }

  // optional int32 saves = 5;
  if (this->saves() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->saves(), output);
  }

  // optional int32 shots = 6;
  if (this->shots() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shots(), output);
  }

  // optional int32 demolitions = 7;
  if (this->demolitions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->demolitions(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.ScoreInfo)
}

::google::protobuf::uint8* ScoreInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.ScoreInfo)
  // optional int32 score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 goals = 2;
  if (this->goals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goals(), target);
  }

  // optional int32 own_goals = 3;
  if (this->own_goals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->own_goals(), target);
  }

  // optional int32 assists = 4;
  if (this->assists() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->assists(), target);
  }

  // optional int32 saves = 5;
  if (this->saves() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->saves(), target);
  }

  // optional int32 shots = 6;
  if (this->shots() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shots(), target);
  }

  // optional int32 demolitions = 7;
  if (this->demolitions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->demolitions(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.ScoreInfo)
  return target;
}

size_t ScoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.ScoreInfo)
  size_t total_size = 0;

  // optional int32 score = 1;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // optional int32 goals = 2;
  if (this->goals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goals());
  }

  // optional int32 own_goals = 3;
  if (this->own_goals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->own_goals());
  }

  // optional int32 assists = 4;
  if (this->assists() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assists());
  }

  // optional int32 saves = 5;
  if (this->saves() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->saves());
  }

  // optional int32 shots = 6;
  if (this->shots() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shots());
  }

  // optional int32 demolitions = 7;
  if (this->demolitions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->demolitions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.ScoreInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ScoreInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.ScoreInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.ScoreInfo)
    UnsafeMergeFrom(*source);
  }
}

void ScoreInfo::MergeFrom(const ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.ScoreInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ScoreInfo::UnsafeMergeFrom(const ScoreInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.goals() != 0) {
    set_goals(from.goals());
  }
  if (from.own_goals() != 0) {
    set_own_goals(from.own_goals());
  }
  if (from.assists() != 0) {
    set_assists(from.assists());
  }
  if (from.saves() != 0) {
    set_saves(from.saves());
  }
  if (from.shots() != 0) {
    set_shots(from.shots());
  }
  if (from.demolitions() != 0) {
    set_demolitions(from.demolitions());
  }
}

void ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.ScoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreInfo::CopyFrom(const ScoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.ScoreInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ScoreInfo::IsInitialized() const {

  return true;
}

void ScoreInfo::Swap(ScoreInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreInfo::InternalSwap(ScoreInfo* other) {
  std::swap(score_, other->score_);
  std::swap(goals_, other->goals_);
  std::swap(own_goals_, other->own_goals_);
  std::swap(assists_, other->assists_);
  std::swap(saves_, other->saves_);
  std::swap(shots_, other->shots_);
  std::swap(demolitions_, other->demolitions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreInfo_descriptor_;
  metadata.reflection = ScoreInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreInfo

// optional int32 score = 1;
void ScoreInfo::clear_score() {
  score_ = 0;
}
::google::protobuf::int32 ScoreInfo::score() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.score)
  return score_;
}
void ScoreInfo::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.score)
}

// optional int32 goals = 2;
void ScoreInfo::clear_goals() {
  goals_ = 0;
}
::google::protobuf::int32 ScoreInfo::goals() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.goals)
  return goals_;
}
void ScoreInfo::set_goals(::google::protobuf::int32 value) {
  
  goals_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.goals)
}

// optional int32 own_goals = 3;
void ScoreInfo::clear_own_goals() {
  own_goals_ = 0;
}
::google::protobuf::int32 ScoreInfo::own_goals() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.own_goals)
  return own_goals_;
}
void ScoreInfo::set_own_goals(::google::protobuf::int32 value) {
  
  own_goals_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.own_goals)
}

// optional int32 assists = 4;
void ScoreInfo::clear_assists() {
  assists_ = 0;
}
::google::protobuf::int32 ScoreInfo::assists() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.assists)
  return assists_;
}
void ScoreInfo::set_assists(::google::protobuf::int32 value) {
  
  assists_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.assists)
}

// optional int32 saves = 5;
void ScoreInfo::clear_saves() {
  saves_ = 0;
}
::google::protobuf::int32 ScoreInfo::saves() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.saves)
  return saves_;
}
void ScoreInfo::set_saves(::google::protobuf::int32 value) {
  
  saves_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.saves)
}

// optional int32 shots = 6;
void ScoreInfo::clear_shots() {
  shots_ = 0;
}
::google::protobuf::int32 ScoreInfo::shots() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.shots)
  return shots_;
}
void ScoreInfo::set_shots(::google::protobuf::int32 value) {
  
  shots_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.shots)
}

// optional int32 demolitions = 7;
void ScoreInfo::clear_demolitions() {
  demolitions_ = 0;
}
::google::protobuf::int32 ScoreInfo::demolitions() const {
  // @@protoc_insertion_point(field_get:rlbot.api.ScoreInfo.demolitions)
  return demolitions_;
}
void ScoreInfo::set_demolitions(::google::protobuf::int32 value) {
  
  demolitions_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.ScoreInfo.demolitions)
}

inline const ScoreInfo* ScoreInfo::internal_default_instance() {
  return &ScoreInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kLocationFieldNumber;
const int PlayerInfo::kRotationFieldNumber;
const int PlayerInfo::kVelocityFieldNumber;
const int PlayerInfo::kAngularVelocityFieldNumber;
const int PlayerInfo::kScoreInfoFieldNumber;
const int PlayerInfo::kIsDemolishedFieldNumber;
const int PlayerInfo::kIsMidairFieldNumber;
const int PlayerInfo::kIsSupersonicFieldNumber;
const int PlayerInfo::kIsBotFieldNumber;
const int PlayerInfo::kJumpedFieldNumber;
const int PlayerInfo::kDoubleJumpedFieldNumber;
const int PlayerInfo::kNameFieldNumber;
const int PlayerInfo::kTeamFieldNumber;
const int PlayerInfo::kBoostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  rotation_ = const_cast< ::rlbot::api::Rotator*>(
      ::rlbot::api::Rotator::internal_default_instance());
  velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  angular_velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  score_info_ = const_cast< ::rlbot::api::ScoreInfo*>(
      ::rlbot::api::ScoreInfo::internal_default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  rotation_ = NULL;
  velocity_ = NULL;
  angular_velocity_ = NULL;
  score_info_ = NULL;
  ::memset(&is_demolished_, 0, reinterpret_cast<char*>(&boost_) -
    reinterpret_cast<char*>(&is_demolished_) + sizeof(boost_));
  _cached_size_ = 0;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &PlayerInfo_default_instance_.get()) {
    delete location_;
    delete rotation_;
    delete velocity_;
    delete angular_velocity_;
    delete score_info_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo> PlayerInfo_default_instance_;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.PlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_demolished_, is_supersonic_);
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && score_info_ != NULL) delete score_info_;
  score_info_ = NULL;
  ZR_(is_bot_, boost_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rlbot.api.Vector3 location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .rlbot.api.Rotator rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // optional .rlbot.api.Vector3 velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_angular_velocity;
        break;
      }

      // optional .rlbot.api.Vector3 angular_velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_score_info;
        break;
      }

      // optional .rlbot.api.ScoreInfo score_info = 5;
      case 5: {
        if (tag == 42) {
         parse_score_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_demolished;
        break;
      }

      // optional bool is_demolished = 6;
      case 6: {
        if (tag == 48) {
         parse_is_demolished:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_demolished_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_midair;
        break;
      }

      // optional bool is_midair = 7;
      case 7: {
        if (tag == 56) {
         parse_is_midair:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_midair_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_supersonic;
        break;
      }

      // optional bool is_supersonic = 8;
      case 8: {
        if (tag == 64) {
         parse_is_supersonic:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supersonic_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_is_bot;
        break;
      }

      // optional bool is_bot = 9;
      case 9: {
        if (tag == 72) {
         parse_is_bot:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bot_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_jumped;
        break;
      }

      // optional bool jumped = 10;
      case 10: {
        if (tag == 80) {
         parse_jumped:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &jumped_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_double_jumped;
        break;
      }

      // optional bool double_jumped = 11;
      case 11: {
        if (tag == 88) {
         parse_double_jumped:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &double_jumped_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // optional string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rlbot.api.PlayerInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_team;
        break;
      }

      // optional int32 team = 13;
      case 13: {
        if (tag == 104) {
         parse_team:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_boost;
        break;
      }

      // optional int32 boost = 14;
      case 14: {
        if (tag == 112) {
         parse_boost:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boost_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.PlayerInfo)
  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // optional .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // optional .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // optional .rlbot.api.ScoreInfo score_info = 5;
  if (this->has_score_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->score_info_, output);
  }

  // optional bool is_demolished = 6;
  if (this->is_demolished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_demolished(), output);
  }

  // optional bool is_midair = 7;
  if (this->is_midair() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_midair(), output);
  }

  // optional bool is_supersonic = 8;
  if (this->is_supersonic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_supersonic(), output);
  }

  // optional bool is_bot = 9;
  if (this->is_bot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_bot(), output);
  }

  // optional bool jumped = 10;
  if (this->jumped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->jumped(), output);
  }

  // optional bool double_jumped = 11;
  if (this->double_jumped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->double_jumped(), output);
  }

  // optional string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // optional int32 team = 13;
  if (this->team() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->team(), output);
  }

  // optional int32 boost = 14;
  if (this->boost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->boost(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.PlayerInfo)
  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rotation_, false, target);
  }

  // optional .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->velocity_, false, target);
  }

  // optional .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->angular_velocity_, false, target);
  }

  // optional .rlbot.api.ScoreInfo score_info = 5;
  if (this->has_score_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->score_info_, false, target);
  }

  // optional bool is_demolished = 6;
  if (this->is_demolished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_demolished(), target);
  }

  // optional bool is_midair = 7;
  if (this->is_midair() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_midair(), target);
  }

  // optional bool is_supersonic = 8;
  if (this->is_supersonic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_supersonic(), target);
  }

  // optional bool is_bot = 9;
  if (this->is_bot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_bot(), target);
  }

  // optional bool jumped = 10;
  if (this->jumped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->jumped(), target);
  }

  // optional bool double_jumped = 11;
  if (this->double_jumped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->double_jumped(), target);
  }

  // optional string name = 12;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rlbot.api.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // optional int32 team = 13;
  if (this->team() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->team(), target);
  }

  // optional int32 boost = 14;
  if (this->boost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->boost(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.PlayerInfo)
  size_t total_size = 0;

  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  // optional .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  // optional .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // optional .rlbot.api.ScoreInfo score_info = 5;
  if (this->has_score_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->score_info_);
  }

  // optional bool is_demolished = 6;
  if (this->is_demolished() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_midair = 7;
  if (this->is_midair() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_supersonic = 8;
  if (this->is_supersonic() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_bot = 9;
  if (this->is_bot() != 0) {
    total_size += 1 + 1;
  }

  // optional bool jumped = 10;
  if (this->jumped() != 0) {
    total_size += 1 + 1;
  }

  // optional bool double_jumped = 11;
  if (this->double_jumped() != 0) {
    total_size += 1 + 1;
  }

  // optional string name = 12;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 team = 13;
  if (this->team() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->team());
  }

  // optional int32 boost = 14;
  if (this->boost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.PlayerInfo)
    UnsafeMergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.PlayerInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PlayerInfo::UnsafeMergeFrom(const PlayerInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::rlbot::api::Rotator::MergeFrom(from.rotation());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::rlbot::api::Vector3::MergeFrom(from.velocity());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::rlbot::api::Vector3::MergeFrom(from.angular_velocity());
  }
  if (from.has_score_info()) {
    mutable_score_info()->::rlbot::api::ScoreInfo::MergeFrom(from.score_info());
  }
  if (from.is_demolished() != 0) {
    set_is_demolished(from.is_demolished());
  }
  if (from.is_midair() != 0) {
    set_is_midair(from.is_midair());
  }
  if (from.is_supersonic() != 0) {
    set_is_supersonic(from.is_supersonic());
  }
  if (from.is_bot() != 0) {
    set_is_bot(from.is_bot());
  }
  if (from.jumped() != 0) {
    set_jumped(from.jumped());
  }
  if (from.double_jumped() != 0) {
    set_double_jumped(from.double_jumped());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.team() != 0) {
    set_team(from.team());
  }
  if (from.boost() != 0) {
    set_boost(from.boost());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.PlayerInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  std::swap(location_, other->location_);
  std::swap(rotation_, other->rotation_);
  std::swap(velocity_, other->velocity_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(score_info_, other->score_info_);
  std::swap(is_demolished_, other->is_demolished_);
  std::swap(is_midair_, other->is_midair_);
  std::swap(is_supersonic_, other->is_supersonic_);
  std::swap(is_bot_, other->is_bot_);
  std::swap(jumped_, other->jumped_);
  std::swap(double_jumped_, other->double_jumped_);
  name_.Swap(&other->name_);
  std::swap(team_, other->team_);
  std::swap(boost_, other->boost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional .rlbot.api.Vector3 location = 1;
bool PlayerInfo::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void PlayerInfo::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::rlbot::api::Vector3& PlayerInfo::location() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.location)
  return location_ != NULL ? *location_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* PlayerInfo::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.PlayerInfo.location)
  return location_;
}
::rlbot::api::Vector3* PlayerInfo::release_location() {
  // @@protoc_insertion_point(field_release:rlbot.api.PlayerInfo.location)
  
  ::rlbot::api::Vector3* temp = location_;
  location_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_location(::rlbot::api::Vector3* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.PlayerInfo.location)
}

// optional .rlbot.api.Rotator rotation = 2;
bool PlayerInfo::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void PlayerInfo::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::rlbot::api::Rotator& PlayerInfo::rotation() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::rlbot::api::Rotator::internal_default_instance();
}
::rlbot::api::Rotator* PlayerInfo::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::rlbot::api::Rotator;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.PlayerInfo.rotation)
  return rotation_;
}
::rlbot::api::Rotator* PlayerInfo::release_rotation() {
  // @@protoc_insertion_point(field_release:rlbot.api.PlayerInfo.rotation)
  
  ::rlbot::api::Rotator* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_rotation(::rlbot::api::Rotator* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.PlayerInfo.rotation)
}

// optional .rlbot.api.Vector3 velocity = 3;
bool PlayerInfo::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
void PlayerInfo::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
const ::rlbot::api::Vector3& PlayerInfo::velocity() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* PlayerInfo::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.PlayerInfo.velocity)
  return velocity_;
}
::rlbot::api::Vector3* PlayerInfo::release_velocity() {
  // @@protoc_insertion_point(field_release:rlbot.api.PlayerInfo.velocity)
  
  ::rlbot::api::Vector3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_velocity(::rlbot::api::Vector3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.PlayerInfo.velocity)
}

// optional .rlbot.api.Vector3 angular_velocity = 4;
bool PlayerInfo::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
void PlayerInfo::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::rlbot::api::Vector3& PlayerInfo::angular_velocity() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* PlayerInfo::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.PlayerInfo.angular_velocity)
  return angular_velocity_;
}
::rlbot::api::Vector3* PlayerInfo::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:rlbot.api.PlayerInfo.angular_velocity)
  
  ::rlbot::api::Vector3* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_angular_velocity(::rlbot::api::Vector3* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.PlayerInfo.angular_velocity)
}

// optional .rlbot.api.ScoreInfo score_info = 5;
bool PlayerInfo::has_score_info() const {
  return this != internal_default_instance() && score_info_ != NULL;
}
void PlayerInfo::clear_score_info() {
  if (GetArenaNoVirtual() == NULL && score_info_ != NULL) delete score_info_;
  score_info_ = NULL;
}
const ::rlbot::api::ScoreInfo& PlayerInfo::score_info() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.score_info)
  return score_info_ != NULL ? *score_info_
                         : *::rlbot::api::ScoreInfo::internal_default_instance();
}
::rlbot::api::ScoreInfo* PlayerInfo::mutable_score_info() {
  
  if (score_info_ == NULL) {
    score_info_ = new ::rlbot::api::ScoreInfo;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.PlayerInfo.score_info)
  return score_info_;
}
::rlbot::api::ScoreInfo* PlayerInfo::release_score_info() {
  // @@protoc_insertion_point(field_release:rlbot.api.PlayerInfo.score_info)
  
  ::rlbot::api::ScoreInfo* temp = score_info_;
  score_info_ = NULL;
  return temp;
}
void PlayerInfo::set_allocated_score_info(::rlbot::api::ScoreInfo* score_info) {
  delete score_info_;
  score_info_ = score_info;
  if (score_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.PlayerInfo.score_info)
}

// optional bool is_demolished = 6;
void PlayerInfo::clear_is_demolished() {
  is_demolished_ = false;
}
bool PlayerInfo::is_demolished() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.is_demolished)
  return is_demolished_;
}
void PlayerInfo::set_is_demolished(bool value) {
  
  is_demolished_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.is_demolished)
}

// optional bool is_midair = 7;
void PlayerInfo::clear_is_midair() {
  is_midair_ = false;
}
bool PlayerInfo::is_midair() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.is_midair)
  return is_midair_;
}
void PlayerInfo::set_is_midair(bool value) {
  
  is_midair_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.is_midair)
}

// optional bool is_supersonic = 8;
void PlayerInfo::clear_is_supersonic() {
  is_supersonic_ = false;
}
bool PlayerInfo::is_supersonic() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.is_supersonic)
  return is_supersonic_;
}
void PlayerInfo::set_is_supersonic(bool value) {
  
  is_supersonic_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.is_supersonic)
}

// optional bool is_bot = 9;
void PlayerInfo::clear_is_bot() {
  is_bot_ = false;
}
bool PlayerInfo::is_bot() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.is_bot)
  return is_bot_;
}
void PlayerInfo::set_is_bot(bool value) {
  
  is_bot_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.is_bot)
}

// optional bool jumped = 10;
void PlayerInfo::clear_jumped() {
  jumped_ = false;
}
bool PlayerInfo::jumped() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.jumped)
  return jumped_;
}
void PlayerInfo::set_jumped(bool value) {
  
  jumped_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.jumped)
}

// optional bool double_jumped = 11;
void PlayerInfo::clear_double_jumped() {
  double_jumped_ = false;
}
bool PlayerInfo::double_jumped() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.double_jumped)
  return double_jumped_;
}
void PlayerInfo::set_double_jumped(bool value) {
  
  double_jumped_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.double_jumped)
}

// optional string name = 12;
void PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.name)
}
void PlayerInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rlbot.api.PlayerInfo.name)
}
void PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rlbot.api.PlayerInfo.name)
}
::std::string* PlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:rlbot.api.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:rlbot.api.PlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.PlayerInfo.name)
}

// optional int32 team = 13;
void PlayerInfo::clear_team() {
  team_ = 0;
}
::google::protobuf::int32 PlayerInfo::team() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.team)
  return team_;
}
void PlayerInfo::set_team(::google::protobuf::int32 value) {
  
  team_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.team)
}

// optional int32 boost = 14;
void PlayerInfo::clear_boost() {
  boost_ = 0;
}
::google::protobuf::int32 PlayerInfo::boost() const {
  // @@protoc_insertion_point(field_get:rlbot.api.PlayerInfo.boost)
  return boost_;
}
void PlayerInfo::set_boost(::google::protobuf::int32 value) {
  
  boost_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.PlayerInfo.boost)
}

inline const PlayerInfo* PlayerInfo::internal_default_instance() {
  return &PlayerInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallInfo::kLocationFieldNumber;
const int BallInfo::kRotationFieldNumber;
const int BallInfo::kVelocityFieldNumber;
const int BallInfo::kAngularVelocityFieldNumber;
const int BallInfo::kAccelerationFieldNumber;
const int BallInfo::kLatestTouchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallInfo::BallInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.BallInfo)
}

void BallInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  rotation_ = const_cast< ::rlbot::api::Rotator*>(
      ::rlbot::api::Rotator::internal_default_instance());
  velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  angular_velocity_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  acceleration_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
  latest_touch_ = const_cast< ::rlbot::api::Touch*>(
      ::rlbot::api::Touch::internal_default_instance());
}

BallInfo::BallInfo(const BallInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.BallInfo)
}

void BallInfo::SharedCtor() {
  location_ = NULL;
  rotation_ = NULL;
  velocity_ = NULL;
  angular_velocity_ = NULL;
  acceleration_ = NULL;
  latest_touch_ = NULL;
  _cached_size_ = 0;
}

BallInfo::~BallInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.BallInfo)
  SharedDtor();
}

void BallInfo::SharedDtor() {
  if (this != &BallInfo_default_instance_.get()) {
    delete location_;
    delete rotation_;
    delete velocity_;
    delete angular_velocity_;
    delete acceleration_;
    delete latest_touch_;
  }
}

void BallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallInfo_descriptor_;
}

const BallInfo& BallInfo::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BallInfo> BallInfo_default_instance_;

BallInfo* BallInfo::New(::google::protobuf::Arena* arena) const {
  BallInfo* n = new BallInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.BallInfo)
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) delete acceleration_;
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && latest_touch_ != NULL) delete latest_touch_;
  latest_touch_ = NULL;
}

bool BallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.BallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rlbot.api.Vector3 location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .rlbot.api.Rotator rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // optional .rlbot.api.Vector3 velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_angular_velocity;
        break;
      }

      // optional .rlbot.api.Vector3 angular_velocity = 4;
      case 4: {
        if (tag == 34) {
         parse_angular_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_acceleration;
        break;
      }

      // optional .rlbot.api.Vector3 acceleration = 5;
      case 5: {
        if (tag == 42) {
         parse_acceleration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_latest_touch;
        break;
      }

      // optional .rlbot.api.Touch latest_touch = 6;
      case 6: {
        if (tag == 50) {
         parse_latest_touch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latest_touch()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.BallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.BallInfo)
  return false;
#undef DO_
}

void BallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.BallInfo)
  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // optional .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // optional .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // optional .rlbot.api.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->acceleration_, output);
  }

  // optional .rlbot.api.Touch latest_touch = 6;
  if (this->has_latest_touch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->latest_touch_, output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.BallInfo)
}

::google::protobuf::uint8* BallInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.BallInfo)
  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rotation_, false, target);
  }

  // optional .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->velocity_, false, target);
  }

  // optional .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->angular_velocity_, false, target);
  }

  // optional .rlbot.api.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->acceleration_, false, target);
  }

  // optional .rlbot.api.Touch latest_touch = 6;
  if (this->has_latest_touch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->latest_touch_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.BallInfo)
  return target;
}

size_t BallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.BallInfo)
  size_t total_size = 0;

  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional .rlbot.api.Rotator rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  // optional .rlbot.api.Vector3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  // optional .rlbot.api.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // optional .rlbot.api.Vector3 acceleration = 5;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);
  }

  // optional .rlbot.api.Touch latest_touch = 6;
  if (this->has_latest_touch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latest_touch_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.BallInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BallInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BallInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.BallInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.BallInfo)
    UnsafeMergeFrom(*source);
  }
}

void BallInfo::MergeFrom(const BallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.BallInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BallInfo::UnsafeMergeFrom(const BallInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::rlbot::api::Rotator::MergeFrom(from.rotation());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::rlbot::api::Vector3::MergeFrom(from.velocity());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::rlbot::api::Vector3::MergeFrom(from.angular_velocity());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::rlbot::api::Vector3::MergeFrom(from.acceleration());
  }
  if (from.has_latest_touch()) {
    mutable_latest_touch()->::rlbot::api::Touch::MergeFrom(from.latest_touch());
  }
}

void BallInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.BallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallInfo::CopyFrom(const BallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.BallInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BallInfo::IsInitialized() const {

  return true;
}

void BallInfo::Swap(BallInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallInfo::InternalSwap(BallInfo* other) {
  std::swap(location_, other->location_);
  std::swap(rotation_, other->rotation_);
  std::swap(velocity_, other->velocity_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(latest_touch_, other->latest_touch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallInfo_descriptor_;
  metadata.reflection = BallInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallInfo

// optional .rlbot.api.Vector3 location = 1;
bool BallInfo::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void BallInfo::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::rlbot::api::Vector3& BallInfo::location() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BallInfo.location)
  return location_ != NULL ? *location_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* BallInfo::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BallInfo.location)
  return location_;
}
::rlbot::api::Vector3* BallInfo::release_location() {
  // @@protoc_insertion_point(field_release:rlbot.api.BallInfo.location)
  
  ::rlbot::api::Vector3* temp = location_;
  location_ = NULL;
  return temp;
}
void BallInfo::set_allocated_location(::rlbot::api::Vector3* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BallInfo.location)
}

// optional .rlbot.api.Rotator rotation = 2;
bool BallInfo::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void BallInfo::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::rlbot::api::Rotator& BallInfo::rotation() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BallInfo.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::rlbot::api::Rotator::internal_default_instance();
}
::rlbot::api::Rotator* BallInfo::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::rlbot::api::Rotator;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BallInfo.rotation)
  return rotation_;
}
::rlbot::api::Rotator* BallInfo::release_rotation() {
  // @@protoc_insertion_point(field_release:rlbot.api.BallInfo.rotation)
  
  ::rlbot::api::Rotator* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void BallInfo::set_allocated_rotation(::rlbot::api::Rotator* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BallInfo.rotation)
}

// optional .rlbot.api.Vector3 velocity = 3;
bool BallInfo::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
void BallInfo::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
const ::rlbot::api::Vector3& BallInfo::velocity() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BallInfo.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* BallInfo::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BallInfo.velocity)
  return velocity_;
}
::rlbot::api::Vector3* BallInfo::release_velocity() {
  // @@protoc_insertion_point(field_release:rlbot.api.BallInfo.velocity)
  
  ::rlbot::api::Vector3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void BallInfo::set_allocated_velocity(::rlbot::api::Vector3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BallInfo.velocity)
}

// optional .rlbot.api.Vector3 angular_velocity = 4;
bool BallInfo::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
void BallInfo::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::rlbot::api::Vector3& BallInfo::angular_velocity() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BallInfo.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* BallInfo::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BallInfo.angular_velocity)
  return angular_velocity_;
}
::rlbot::api::Vector3* BallInfo::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:rlbot.api.BallInfo.angular_velocity)
  
  ::rlbot::api::Vector3* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void BallInfo::set_allocated_angular_velocity(::rlbot::api::Vector3* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BallInfo.angular_velocity)
}

// optional .rlbot.api.Vector3 acceleration = 5;
bool BallInfo::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
void BallInfo::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) delete acceleration_;
  acceleration_ = NULL;
}
const ::rlbot::api::Vector3& BallInfo::acceleration() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BallInfo.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* BallInfo::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    acceleration_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BallInfo.acceleration)
  return acceleration_;
}
::rlbot::api::Vector3* BallInfo::release_acceleration() {
  // @@protoc_insertion_point(field_release:rlbot.api.BallInfo.acceleration)
  
  ::rlbot::api::Vector3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void BallInfo::set_allocated_acceleration(::rlbot::api::Vector3* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BallInfo.acceleration)
}

// optional .rlbot.api.Touch latest_touch = 6;
bool BallInfo::has_latest_touch() const {
  return this != internal_default_instance() && latest_touch_ != NULL;
}
void BallInfo::clear_latest_touch() {
  if (GetArenaNoVirtual() == NULL && latest_touch_ != NULL) delete latest_touch_;
  latest_touch_ = NULL;
}
const ::rlbot::api::Touch& BallInfo::latest_touch() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BallInfo.latest_touch)
  return latest_touch_ != NULL ? *latest_touch_
                         : *::rlbot::api::Touch::internal_default_instance();
}
::rlbot::api::Touch* BallInfo::mutable_latest_touch() {
  
  if (latest_touch_ == NULL) {
    latest_touch_ = new ::rlbot::api::Touch;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BallInfo.latest_touch)
  return latest_touch_;
}
::rlbot::api::Touch* BallInfo::release_latest_touch() {
  // @@protoc_insertion_point(field_release:rlbot.api.BallInfo.latest_touch)
  
  ::rlbot::api::Touch* temp = latest_touch_;
  latest_touch_ = NULL;
  return temp;
}
void BallInfo::set_allocated_latest_touch(::rlbot::api::Touch* latest_touch) {
  delete latest_touch_;
  latest_touch_ = latest_touch;
  if (latest_touch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BallInfo.latest_touch)
}

inline const BallInfo* BallInfo::internal_default_instance() {
  return &BallInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoostInfo::kLocationFieldNumber;
const int BoostInfo::kIsActiveFieldNumber;
const int BoostInfo::kTimerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoostInfo::BoostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.BoostInfo)
}

void BoostInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::rlbot::api::Vector3*>(
      ::rlbot::api::Vector3::internal_default_instance());
}

BoostInfo::BoostInfo(const BoostInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.BoostInfo)
}

void BoostInfo::SharedCtor() {
  location_ = NULL;
  ::memset(&is_active_, 0, reinterpret_cast<char*>(&timer_) -
    reinterpret_cast<char*>(&is_active_) + sizeof(timer_));
  _cached_size_ = 0;
}

BoostInfo::~BoostInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.BoostInfo)
  SharedDtor();
}

void BoostInfo::SharedDtor() {
  if (this != &BoostInfo_default_instance_.get()) {
    delete location_;
  }
}

void BoostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoostInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoostInfo_descriptor_;
}

const BoostInfo& BoostInfo::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BoostInfo> BoostInfo_default_instance_;

BoostInfo* BoostInfo::New(::google::protobuf::Arena* arena) const {
  BoostInfo* n = new BoostInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.BoostInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BoostInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BoostInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_active_, timer_);
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool BoostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.BoostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .rlbot.api.Vector3 location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 2;
      case 2: {
        if (tag == 16) {
         parse_is_active:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timer;
        break;
      }

      // optional int32 timer = 3;
      case 3: {
        if (tag == 24) {
         parse_timer:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timer_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.BoostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.BoostInfo)
  return false;
#undef DO_
}

void BoostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.BoostInfo)
  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional bool is_active = 2;
  if (this->is_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_active(), output);
  }

  // optional int32 timer = 3;
  if (this->timer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timer(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.BoostInfo)
}

::google::protobuf::uint8* BoostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.BoostInfo)
  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, false, target);
  }

  // optional bool is_active = 2;
  if (this->is_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_active(), target);
  }

  // optional int32 timer = 3;
  if (this->timer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.BoostInfo)
  return target;
}

size_t BoostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.BoostInfo)
  size_t total_size = 0;

  // optional .rlbot.api.Vector3 location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional bool is_active = 2;
  if (this->is_active() != 0) {
    total_size += 1 + 1;
  }

  // optional int32 timer = 3;
  if (this->timer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.BoostInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BoostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.BoostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.BoostInfo)
    UnsafeMergeFrom(*source);
  }
}

void BoostInfo::MergeFrom(const BoostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.BoostInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BoostInfo::UnsafeMergeFrom(const BoostInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_location()) {
    mutable_location()->::rlbot::api::Vector3::MergeFrom(from.location());
  }
  if (from.is_active() != 0) {
    set_is_active(from.is_active());
  }
  if (from.timer() != 0) {
    set_timer(from.timer());
  }
}

void BoostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.BoostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoostInfo::CopyFrom(const BoostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.BoostInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BoostInfo::IsInitialized() const {

  return true;
}

void BoostInfo::Swap(BoostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoostInfo::InternalSwap(BoostInfo* other) {
  std::swap(location_, other->location_);
  std::swap(is_active_, other->is_active_);
  std::swap(timer_, other->timer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoostInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoostInfo_descriptor_;
  metadata.reflection = BoostInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoostInfo

// optional .rlbot.api.Vector3 location = 1;
bool BoostInfo::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void BoostInfo::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::rlbot::api::Vector3& BoostInfo::location() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BoostInfo.location)
  return location_ != NULL ? *location_
                         : *::rlbot::api::Vector3::internal_default_instance();
}
::rlbot::api::Vector3* BoostInfo::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::rlbot::api::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.BoostInfo.location)
  return location_;
}
::rlbot::api::Vector3* BoostInfo::release_location() {
  // @@protoc_insertion_point(field_release:rlbot.api.BoostInfo.location)
  
  ::rlbot::api::Vector3* temp = location_;
  location_ = NULL;
  return temp;
}
void BoostInfo::set_allocated_location(::rlbot::api::Vector3* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.BoostInfo.location)
}

// optional bool is_active = 2;
void BoostInfo::clear_is_active() {
  is_active_ = false;
}
bool BoostInfo::is_active() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BoostInfo.is_active)
  return is_active_;
}
void BoostInfo::set_is_active(bool value) {
  
  is_active_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.BoostInfo.is_active)
}

// optional int32 timer = 3;
void BoostInfo::clear_timer() {
  timer_ = 0;
}
::google::protobuf::int32 BoostInfo::timer() const {
  // @@protoc_insertion_point(field_get:rlbot.api.BoostInfo.timer)
  return timer_;
}
void BoostInfo::set_timer(::google::protobuf::int32 value) {
  
  timer_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.BoostInfo.timer)
}

inline const BoostInfo* BoostInfo::internal_default_instance() {
  return &BoostInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kSecondsElapsedFieldNumber;
const int GameInfo::kGameTimeRemainingFieldNumber;
const int GameInfo::kIsOvertimeFieldNumber;
const int GameInfo::kIsUnlimitedTimeFieldNumber;
const int GameInfo::kIsRoundActiveFieldNumber;
const int GameInfo::kIsKickoffPauseFieldNumber;
const int GameInfo::kIsMatchEndedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.GameInfo)
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.GameInfo)
}

void GameInfo::SharedCtor() {
  ::memset(&seconds_elapsed_, 0, reinterpret_cast<char*>(&is_match_ended_) -
    reinterpret_cast<char*>(&seconds_elapsed_) + sizeof(is_match_ended_));
  _cached_size_ = 0;
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:rlbot.api.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameInfo> GameInfo_default_instance_;

GameInfo* GameInfo::New(::google::protobuf::Arena* arena) const {
  GameInfo* n = new GameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.GameInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GameInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GameInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(seconds_elapsed_, is_match_ended_);

#undef ZR_HELPER_
#undef ZR_

}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float seconds_elapsed = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seconds_elapsed_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_game_time_remaining;
        break;
      }

      // optional float game_time_remaining = 2;
      case 2: {
        if (tag == 21) {
         parse_game_time_remaining:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_time_remaining_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_overtime;
        break;
      }

      // optional bool is_overtime = 3;
      case 3: {
        if (tag == 24) {
         parse_is_overtime:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_overtime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_unlimited_time;
        break;
      }

      // optional bool is_unlimited_time = 4;
      case 4: {
        if (tag == 32) {
         parse_is_unlimited_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unlimited_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_round_active;
        break;
      }

      // optional bool is_round_active = 5;
      case 5: {
        if (tag == 40) {
         parse_is_round_active:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_round_active_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_is_kickoff_pause;
        break;
      }

      // optional bool is_kickoff_pause = 6;
      case 6: {
        if (tag == 48) {
         parse_is_kickoff_pause:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_kickoff_pause_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_match_ended;
        break;
      }

      // optional bool is_match_ended = 7;
      case 7: {
        if (tag == 56) {
         parse_is_match_ended:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_match_ended_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.GameInfo)
  // optional float seconds_elapsed = 1;
  if (this->seconds_elapsed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->seconds_elapsed(), output);
  }

  // optional float game_time_remaining = 2;
  if (this->game_time_remaining() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_time_remaining(), output);
  }

  // optional bool is_overtime = 3;
  if (this->is_overtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_overtime(), output);
  }

  // optional bool is_unlimited_time = 4;
  if (this->is_unlimited_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_unlimited_time(), output);
  }

  // optional bool is_round_active = 5;
  if (this->is_round_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_round_active(), output);
  }

  // optional bool is_kickoff_pause = 6;
  if (this->is_kickoff_pause() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_kickoff_pause(), output);
  }

  // optional bool is_match_ended = 7;
  if (this->is_match_ended() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_match_ended(), output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.GameInfo)
  // optional float seconds_elapsed = 1;
  if (this->seconds_elapsed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->seconds_elapsed(), target);
  }

  // optional float game_time_remaining = 2;
  if (this->game_time_remaining() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_time_remaining(), target);
  }

  // optional bool is_overtime = 3;
  if (this->is_overtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_overtime(), target);
  }

  // optional bool is_unlimited_time = 4;
  if (this->is_unlimited_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_unlimited_time(), target);
  }

  // optional bool is_round_active = 5;
  if (this->is_round_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_round_active(), target);
  }

  // optional bool is_kickoff_pause = 6;
  if (this->is_kickoff_pause() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_kickoff_pause(), target);
  }

  // optional bool is_match_ended = 7;
  if (this->is_match_ended() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_match_ended(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.GameInfo)
  size_t total_size = 0;

  // optional float seconds_elapsed = 1;
  if (this->seconds_elapsed() != 0) {
    total_size += 1 + 4;
  }

  // optional float game_time_remaining = 2;
  if (this->game_time_remaining() != 0) {
    total_size += 1 + 4;
  }

  // optional bool is_overtime = 3;
  if (this->is_overtime() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_unlimited_time = 4;
  if (this->is_unlimited_time() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_round_active = 5;
  if (this->is_round_active() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_kickoff_pause = 6;
  if (this->is_kickoff_pause() != 0) {
    total_size += 1 + 1;
  }

  // optional bool is_match_ended = 7;
  if (this->is_match_ended() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.GameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.GameInfo)
    UnsafeMergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.GameInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameInfo::UnsafeMergeFrom(const GameInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.seconds_elapsed() != 0) {
    set_seconds_elapsed(from.seconds_elapsed());
  }
  if (from.game_time_remaining() != 0) {
    set_game_time_remaining(from.game_time_remaining());
  }
  if (from.is_overtime() != 0) {
    set_is_overtime(from.is_overtime());
  }
  if (from.is_unlimited_time() != 0) {
    set_is_unlimited_time(from.is_unlimited_time());
  }
  if (from.is_round_active() != 0) {
    set_is_round_active(from.is_round_active());
  }
  if (from.is_kickoff_pause() != 0) {
    set_is_kickoff_pause(from.is_kickoff_pause());
  }
  if (from.is_match_ended() != 0) {
    set_is_match_ended(from.is_match_ended());
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.GameInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameInfo::IsInitialized() const {

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  std::swap(seconds_elapsed_, other->seconds_elapsed_);
  std::swap(game_time_remaining_, other->game_time_remaining_);
  std::swap(is_overtime_, other->is_overtime_);
  std::swap(is_unlimited_time_, other->is_unlimited_time_);
  std::swap(is_round_active_, other->is_round_active_);
  std::swap(is_kickoff_pause_, other->is_kickoff_pause_);
  std::swap(is_match_ended_, other->is_match_ended_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameInfo

// optional float seconds_elapsed = 1;
void GameInfo::clear_seconds_elapsed() {
  seconds_elapsed_ = 0;
}
float GameInfo::seconds_elapsed() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.seconds_elapsed)
  return seconds_elapsed_;
}
void GameInfo::set_seconds_elapsed(float value) {
  
  seconds_elapsed_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.seconds_elapsed)
}

// optional float game_time_remaining = 2;
void GameInfo::clear_game_time_remaining() {
  game_time_remaining_ = 0;
}
float GameInfo::game_time_remaining() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.game_time_remaining)
  return game_time_remaining_;
}
void GameInfo::set_game_time_remaining(float value) {
  
  game_time_remaining_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.game_time_remaining)
}

// optional bool is_overtime = 3;
void GameInfo::clear_is_overtime() {
  is_overtime_ = false;
}
bool GameInfo::is_overtime() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.is_overtime)
  return is_overtime_;
}
void GameInfo::set_is_overtime(bool value) {
  
  is_overtime_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.is_overtime)
}

// optional bool is_unlimited_time = 4;
void GameInfo::clear_is_unlimited_time() {
  is_unlimited_time_ = false;
}
bool GameInfo::is_unlimited_time() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.is_unlimited_time)
  return is_unlimited_time_;
}
void GameInfo::set_is_unlimited_time(bool value) {
  
  is_unlimited_time_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.is_unlimited_time)
}

// optional bool is_round_active = 5;
void GameInfo::clear_is_round_active() {
  is_round_active_ = false;
}
bool GameInfo::is_round_active() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.is_round_active)
  return is_round_active_;
}
void GameInfo::set_is_round_active(bool value) {
  
  is_round_active_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.is_round_active)
}

// optional bool is_kickoff_pause = 6;
void GameInfo::clear_is_kickoff_pause() {
  is_kickoff_pause_ = false;
}
bool GameInfo::is_kickoff_pause() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.is_kickoff_pause)
  return is_kickoff_pause_;
}
void GameInfo::set_is_kickoff_pause(bool value) {
  
  is_kickoff_pause_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.is_kickoff_pause)
}

// optional bool is_match_ended = 7;
void GameInfo::clear_is_match_ended() {
  is_match_ended_ = false;
}
bool GameInfo::is_match_ended() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameInfo.is_match_ended)
  return is_match_ended_;
}
void GameInfo::set_is_match_ended(bool value) {
  
  is_match_ended_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameInfo.is_match_ended)
}

inline const GameInfo* GameInfo::internal_default_instance() {
  return &GameInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameTickPacket::kPlayersFieldNumber;
const int GameTickPacket::kPlayerIndexFieldNumber;
const int GameTickPacket::kBoostPadsFieldNumber;
const int GameTickPacket::kBallFieldNumber;
const int GameTickPacket::kGameInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameTickPacket::GameTickPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_game_5fdata_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:rlbot.api.GameTickPacket)
}

void GameTickPacket::InitAsDefaultInstance() {
  ball_ = const_cast< ::rlbot::api::BallInfo*>(
      ::rlbot::api::BallInfo::internal_default_instance());
  game_info_ = const_cast< ::rlbot::api::GameInfo*>(
      ::rlbot::api::GameInfo::internal_default_instance());
}

GameTickPacket::GameTickPacket(const GameTickPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:rlbot.api.GameTickPacket)
}

void GameTickPacket::SharedCtor() {
  ball_ = NULL;
  game_info_ = NULL;
  player_index_ = 0;
  _cached_size_ = 0;
}

GameTickPacket::~GameTickPacket() {
  // @@protoc_insertion_point(destructor:rlbot.api.GameTickPacket)
  SharedDtor();
}

void GameTickPacket::SharedDtor() {
  if (this != &GameTickPacket_default_instance_.get()) {
    delete ball_;
    delete game_info_;
  }
}

void GameTickPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTickPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTickPacket_descriptor_;
}

const GameTickPacket& GameTickPacket::default_instance() {
  protobuf_InitDefaults_game_5fdata_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GameTickPacket> GameTickPacket_default_instance_;

GameTickPacket* GameTickPacket::New(::google::protobuf::Arena* arena) const {
  GameTickPacket* n = new GameTickPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameTickPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:rlbot.api.GameTickPacket)
  player_index_ = 0;
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) delete ball_;
  ball_ = NULL;
  if (GetArenaNoVirtual() == NULL && game_info_ != NULL) delete game_info_;
  game_info_ = NULL;
  players_.Clear();
  boost_pads_.Clear();
}

bool GameTickPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rlbot.api.GameTickPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rlbot.api.PlayerInfo players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_player_index;
        break;
      }

      // optional int32 player_index = 2;
      case 2: {
        if (tag == 16) {
         parse_player_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_boost_pads;
        break;
      }

      // repeated .rlbot.api.BoostInfo boost_pads = 3;
      case 3: {
        if (tag == 26) {
         parse_boost_pads:
          DO_(input->IncrementRecursionDepth());
         parse_loop_boost_pads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boost_pads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_boost_pads;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_ball;
        break;
      }

      // optional .rlbot.api.BallInfo ball = 4;
      case 4: {
        if (tag == 34) {
         parse_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_game_info;
        break;
      }

      // optional .rlbot.api.GameInfo game_info = 5;
      case 5: {
        if (tag == 42) {
         parse_game_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rlbot.api.GameTickPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rlbot.api.GameTickPacket)
  return false;
#undef DO_
}

void GameTickPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rlbot.api.GameTickPacket)
  // repeated .rlbot.api.PlayerInfo players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // optional int32 player_index = 2;
  if (this->player_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_index(), output);
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  for (unsigned int i = 0, n = this->boost_pads_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boost_pads(i), output);
  }

  // optional .rlbot.api.BallInfo ball = 4;
  if (this->has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ball_, output);
  }

  // optional .rlbot.api.GameInfo game_info = 5;
  if (this->has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->game_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:rlbot.api.GameTickPacket)
}

::google::protobuf::uint8* GameTickPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rlbot.api.GameTickPacket)
  // repeated .rlbot.api.PlayerInfo players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), false, target);
  }

  // optional int32 player_index = 2;
  if (this->player_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_index(), target);
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  for (unsigned int i = 0, n = this->boost_pads_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->boost_pads(i), false, target);
  }

  // optional .rlbot.api.BallInfo ball = 4;
  if (this->has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ball_, false, target);
  }

  // optional .rlbot.api.GameInfo game_info = 5;
  if (this->has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->game_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rlbot.api.GameTickPacket)
  return target;
}

size_t GameTickPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlbot.api.GameTickPacket)
  size_t total_size = 0;

  // optional int32 player_index = 2;
  if (this->player_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_index());
  }

  // optional .rlbot.api.BallInfo ball = 4;
  if (this->has_ball()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ball_);
  }

  // optional .rlbot.api.GameInfo game_info = 5;
  if (this->has_game_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->game_info_);
  }

  // repeated .rlbot.api.PlayerInfo players = 1;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated .rlbot.api.BoostInfo boost_pads = 3;
  {
    unsigned int count = this->boost_pads_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boost_pads(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTickPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rlbot.api.GameTickPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GameTickPacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameTickPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rlbot.api.GameTickPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rlbot.api.GameTickPacket)
    UnsafeMergeFrom(*source);
  }
}

void GameTickPacket::MergeFrom(const GameTickPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rlbot.api.GameTickPacket)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GameTickPacket::UnsafeMergeFrom(const GameTickPacket& from) {
  GOOGLE_DCHECK(&from != this);
  players_.MergeFrom(from.players_);
  boost_pads_.MergeFrom(from.boost_pads_);
  if (from.player_index() != 0) {
    set_player_index(from.player_index());
  }
  if (from.has_ball()) {
    mutable_ball()->::rlbot::api::BallInfo::MergeFrom(from.ball());
  }
  if (from.has_game_info()) {
    mutable_game_info()->::rlbot::api::GameInfo::MergeFrom(from.game_info());
  }
}

void GameTickPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rlbot.api.GameTickPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTickPacket::CopyFrom(const GameTickPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlbot.api.GameTickPacket)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GameTickPacket::IsInitialized() const {

  return true;
}

void GameTickPacket::Swap(GameTickPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameTickPacket::InternalSwap(GameTickPacket* other) {
  players_.UnsafeArenaSwap(&other->players_);
  std::swap(player_index_, other->player_index_);
  boost_pads_.UnsafeArenaSwap(&other->boost_pads_);
  std::swap(ball_, other->ball_);
  std::swap(game_info_, other->game_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameTickPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTickPacket_descriptor_;
  metadata.reflection = GameTickPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameTickPacket

// repeated .rlbot.api.PlayerInfo players = 1;
int GameTickPacket::players_size() const {
  return players_.size();
}
void GameTickPacket::clear_players() {
  players_.Clear();
}
const ::rlbot::api::PlayerInfo& GameTickPacket::players(int index) const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameTickPacket.players)
  return players_.Get(index);
}
::rlbot::api::PlayerInfo* GameTickPacket::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:rlbot.api.GameTickPacket.players)
  return players_.Mutable(index);
}
::rlbot::api::PlayerInfo* GameTickPacket::add_players() {
  // @@protoc_insertion_point(field_add:rlbot.api.GameTickPacket.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::rlbot::api::PlayerInfo >*
GameTickPacket::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:rlbot.api.GameTickPacket.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::rlbot::api::PlayerInfo >&
GameTickPacket::players() const {
  // @@protoc_insertion_point(field_list:rlbot.api.GameTickPacket.players)
  return players_;
}

// optional int32 player_index = 2;
void GameTickPacket::clear_player_index() {
  player_index_ = 0;
}
::google::protobuf::int32 GameTickPacket::player_index() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameTickPacket.player_index)
  return player_index_;
}
void GameTickPacket::set_player_index(::google::protobuf::int32 value) {
  
  player_index_ = value;
  // @@protoc_insertion_point(field_set:rlbot.api.GameTickPacket.player_index)
}

// repeated .rlbot.api.BoostInfo boost_pads = 3;
int GameTickPacket::boost_pads_size() const {
  return boost_pads_.size();
}
void GameTickPacket::clear_boost_pads() {
  boost_pads_.Clear();
}
const ::rlbot::api::BoostInfo& GameTickPacket::boost_pads(int index) const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameTickPacket.boost_pads)
  return boost_pads_.Get(index);
}
::rlbot::api::BoostInfo* GameTickPacket::mutable_boost_pads(int index) {
  // @@protoc_insertion_point(field_mutable:rlbot.api.GameTickPacket.boost_pads)
  return boost_pads_.Mutable(index);
}
::rlbot::api::BoostInfo* GameTickPacket::add_boost_pads() {
  // @@protoc_insertion_point(field_add:rlbot.api.GameTickPacket.boost_pads)
  return boost_pads_.Add();
}
::google::protobuf::RepeatedPtrField< ::rlbot::api::BoostInfo >*
GameTickPacket::mutable_boost_pads() {
  // @@protoc_insertion_point(field_mutable_list:rlbot.api.GameTickPacket.boost_pads)
  return &boost_pads_;
}
const ::google::protobuf::RepeatedPtrField< ::rlbot::api::BoostInfo >&
GameTickPacket::boost_pads() const {
  // @@protoc_insertion_point(field_list:rlbot.api.GameTickPacket.boost_pads)
  return boost_pads_;
}

// optional .rlbot.api.BallInfo ball = 4;
bool GameTickPacket::has_ball() const {
  return this != internal_default_instance() && ball_ != NULL;
}
void GameTickPacket::clear_ball() {
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) delete ball_;
  ball_ = NULL;
}
const ::rlbot::api::BallInfo& GameTickPacket::ball() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameTickPacket.ball)
  return ball_ != NULL ? *ball_
                         : *::rlbot::api::BallInfo::internal_default_instance();
}
::rlbot::api::BallInfo* GameTickPacket::mutable_ball() {
  
  if (ball_ == NULL) {
    ball_ = new ::rlbot::api::BallInfo;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.GameTickPacket.ball)
  return ball_;
}
::rlbot::api::BallInfo* GameTickPacket::release_ball() {
  // @@protoc_insertion_point(field_release:rlbot.api.GameTickPacket.ball)
  
  ::rlbot::api::BallInfo* temp = ball_;
  ball_ = NULL;
  return temp;
}
void GameTickPacket::set_allocated_ball(::rlbot::api::BallInfo* ball) {
  delete ball_;
  ball_ = ball;
  if (ball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.GameTickPacket.ball)
}

// optional .rlbot.api.GameInfo game_info = 5;
bool GameTickPacket::has_game_info() const {
  return this != internal_default_instance() && game_info_ != NULL;
}
void GameTickPacket::clear_game_info() {
  if (GetArenaNoVirtual() == NULL && game_info_ != NULL) delete game_info_;
  game_info_ = NULL;
}
const ::rlbot::api::GameInfo& GameTickPacket::game_info() const {
  // @@protoc_insertion_point(field_get:rlbot.api.GameTickPacket.game_info)
  return game_info_ != NULL ? *game_info_
                         : *::rlbot::api::GameInfo::internal_default_instance();
}
::rlbot::api::GameInfo* GameTickPacket::mutable_game_info() {
  
  if (game_info_ == NULL) {
    game_info_ = new ::rlbot::api::GameInfo;
  }
  // @@protoc_insertion_point(field_mutable:rlbot.api.GameTickPacket.game_info)
  return game_info_;
}
::rlbot::api::GameInfo* GameTickPacket::release_game_info() {
  // @@protoc_insertion_point(field_release:rlbot.api.GameTickPacket.game_info)
  
  ::rlbot::api::GameInfo* temp = game_info_;
  game_info_ = NULL;
  return temp;
}
void GameTickPacket::set_allocated_game_info(::rlbot::api::GameInfo* game_info) {
  delete game_info_;
  game_info_ = game_info;
  if (game_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rlbot.api.GameTickPacket.game_info)
}

inline const GameTickPacket* GameTickPacket::internal_default_instance() {
  return &GameTickPacket_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace rlbot

// @@protoc_insertion_point(global_scope)
