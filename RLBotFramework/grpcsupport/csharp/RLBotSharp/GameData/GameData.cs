// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Rlbot.Api {

  /// <summary>Holder for reflection information generated from game_data.proto</summary>
  public static partial class GameDataReflection {

    #region Descriptor
    /// <summary>File descriptor for game_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9nYW1lX2RhdGEucHJvdG8SCXJsYm90LmFwaSKMAQoPQ29udHJvbGxlclN0",
            "YXRlEhAKCHRocm90dGxlGAEgASgCEg0KBXN0ZWVyGAIgASgCEg0KBXBpdGNo",
            "GAMgASgCEgsKA3lhdxgEIAEoAhIMCgRyb2xsGAUgASgCEgwKBGp1bXAYBiAB",
            "KAgSDQoFYm9vc3QYByABKAgSEQoJaGFuZGJyYWtlGAggASgIIioKB1ZlY3Rv",
            "cjMSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiMwoHUm90YXRv",
            "chINCgVwaXRjaBgBIAEoAhILCgN5YXcYAiABKAISDAoEcm9sbBgDIAEoAiJ8",
            "CgVUb3VjaBITCgtwbGF5ZXJfbmFtZRgBIAEoCRIUCgxnYW1lX3NlY29uZHMY",
            "AiABKAISJAoIbG9jYXRpb24YAyABKAsyEi5ybGJvdC5hcGkuVmVjdG9yMxIi",
            "CgZub3JtYWwYBCABKAsyEi5ybGJvdC5hcGkuVmVjdG9yMyKAAQoJU2NvcmVJ",
            "bmZvEg0KBXNjb3JlGAEgASgFEg0KBWdvYWxzGAIgASgFEhEKCW93bl9nb2Fs",
            "cxgDIAEoBRIPCgdhc3Npc3RzGAQgASgFEg0KBXNhdmVzGAUgASgFEg0KBXNo",
            "b3RzGAYgASgFEhMKC2RlbW9saXRpb25zGAcgASgFIvkCCgpQbGF5ZXJJbmZv",
            "EiQKCGxvY2F0aW9uGAEgASgLMhIucmxib3QuYXBpLlZlY3RvcjMSJAoIcm90",
            "YXRpb24YAiABKAsyEi5ybGJvdC5hcGkuUm90YXRvchIkCgh2ZWxvY2l0eRgD",
            "IAEoCzISLnJsYm90LmFwaS5WZWN0b3IzEiwKEGFuZ3VsYXJfdmVsb2NpdHkY",
            "BCABKAsyEi5ybGJvdC5hcGkuVmVjdG9yMxIoCgpzY29yZV9pbmZvGAUgASgL",
            "MhQucmxib3QuYXBpLlNjb3JlSW5mbxIVCg1pc19kZW1vbGlzaGVkGAYgASgI",
            "EhEKCWlzX21pZGFpchgHIAEoCBIVCg1pc19zdXBlcnNvbmljGAggASgIEg4K",
            "BmlzX2JvdBgJIAEoCBIOCgZqdW1wZWQYCiABKAgSFQoNZG91YmxlX2p1bXBl",
            "ZBgLIAEoCBIMCgRuYW1lGAwgASgJEgwKBHRlYW0YDSABKAUSDQoFYm9vc3QY",
            "DiABKAUi/AEKCEJhbGxJbmZvEiQKCGxvY2F0aW9uGAEgASgLMhIucmxib3Qu",
            "YXBpLlZlY3RvcjMSJAoIcm90YXRpb24YAiABKAsyEi5ybGJvdC5hcGkuUm90",
            "YXRvchIkCgh2ZWxvY2l0eRgDIAEoCzISLnJsYm90LmFwaS5WZWN0b3IzEiwK",
            "EGFuZ3VsYXJfdmVsb2NpdHkYBCABKAsyEi5ybGJvdC5hcGkuVmVjdG9yMxIo",
            "CgxhY2NlbGVyYXRpb24YBSABKAsyEi5ybGJvdC5hcGkuVmVjdG9yMxImCgxs",
            "YXRlc3RfdG91Y2gYBiABKAsyEC5ybGJvdC5hcGkuVG91Y2giUwoJQm9vc3RJ",
            "bmZvEiQKCGxvY2F0aW9uGAEgASgLMhIucmxib3QuYXBpLlZlY3RvcjMSEQoJ",
            "aXNfYWN0aXZlGAIgASgIEg0KBXRpbWVyGAMgASgFIrsBCghHYW1lSW5mbxIX",
            "Cg9zZWNvbmRzX2VsYXBzZWQYASABKAISGwoTZ2FtZV90aW1lX3JlbWFpbmlu",
            "ZxgCIAEoAhITCgtpc19vdmVydGltZRgDIAEoCBIZChFpc191bmxpbWl0ZWRf",
            "dGltZRgEIAEoCBIXCg9pc19yb3VuZF9hY3RpdmUYBSABKAgSGAoQaXNfa2lj",
            "a29mZl9wYXVzZRgGIAEoCBIWCg5pc19tYXRjaF9lbmRlZBgHIAEoCCLDAQoO",
            "R2FtZVRpY2tQYWNrZXQSJgoHcGxheWVycxgBIAMoCzIVLnJsYm90LmFwaS5Q",
            "bGF5ZXJJbmZvEhQKDHBsYXllcl9pbmRleBgCIAEoBRIoCgpib29zdF9wYWRz",
            "GAMgAygLMhQucmxib3QuYXBpLkJvb3N0SW5mbxIhCgRiYWxsGAQgASgLMhMu",
            "cmxib3QuYXBpLkJhbGxJbmZvEiYKCWdhbWVfaW5mbxgFIAEoCzITLnJsYm90",
            "LmFwaS5HYW1lSW5mbzJUCgNCb3QSTQoSR2V0Q29udHJvbGxlclN0YXRlEhku",
            "cmxib3QuYXBpLkdhbWVUaWNrUGFja2V0Ghoucmxib3QuYXBpLkNvbnRyb2xs",
            "ZXJTdGF0ZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.ControllerState), global::Rlbot.Api.ControllerState.Parser, new[]{ "Throttle", "Steer", "Pitch", "Yaw", "Roll", "Jump", "Boost", "Handbrake" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.Vector3), global::Rlbot.Api.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.Rotator), global::Rlbot.Api.Rotator.Parser, new[]{ "Pitch", "Yaw", "Roll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.Touch), global::Rlbot.Api.Touch.Parser, new[]{ "PlayerName", "GameSeconds", "Location", "Normal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.ScoreInfo), global::Rlbot.Api.ScoreInfo.Parser, new[]{ "Score", "Goals", "OwnGoals", "Assists", "Saves", "Shots", "Demolitions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.PlayerInfo), global::Rlbot.Api.PlayerInfo.Parser, new[]{ "Location", "Rotation", "Velocity", "AngularVelocity", "ScoreInfo", "IsDemolished", "IsMidair", "IsSupersonic", "IsBot", "Jumped", "DoubleJumped", "Name", "Team", "Boost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.BallInfo), global::Rlbot.Api.BallInfo.Parser, new[]{ "Location", "Rotation", "Velocity", "AngularVelocity", "Acceleration", "LatestTouch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.BoostInfo), global::Rlbot.Api.BoostInfo.Parser, new[]{ "Location", "IsActive", "Timer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.GameInfo), global::Rlbot.Api.GameInfo.Parser, new[]{ "SecondsElapsed", "GameTimeRemaining", "IsOvertime", "IsUnlimitedTime", "IsRoundActive", "IsKickoffPause", "IsMatchEnded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Rlbot.Api.GameTickPacket), global::Rlbot.Api.GameTickPacket.Parser, new[]{ "Players", "PlayerIndex", "BoostPads", "Ball", "GameInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ControllerState : pb::IMessage<ControllerState> {
    private static readonly pb::MessageParser<ControllerState> _parser = new pb::MessageParser<ControllerState>(() => new ControllerState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ControllerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerState(ControllerState other) : this() {
      throttle_ = other.throttle_;
      steer_ = other.steer_;
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      roll_ = other.roll_;
      jump_ = other.jump_;
      boost_ = other.boost_;
      handbrake_ = other.handbrake_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ControllerState Clone() {
      return new ControllerState(this);
    }

    /// <summary>Field number for the "throttle" field.</summary>
    public const int ThrottleFieldNumber = 1;
    private float throttle_;
    /// <summary>
    /// -1 for full reverse, 1 for full forward
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Throttle {
      get { return throttle_; }
      set {
        throttle_ = value;
      }
    }

    /// <summary>Field number for the "steer" field.</summary>
    public const int SteerFieldNumber = 2;
    private float steer_;
    /// <summary>
    /// -1 for full left, 1 for full right
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Steer {
      get { return steer_; }
      set {
        steer_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 3;
    private float pitch_;
    /// <summary>
    /// -1 for nose down, 1 for nose up
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 4;
    private float yaw_;
    /// <summary>
    /// -1 for full left, 1 for full right
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 5;
    private float roll_;
    /// <summary>
    /// -1 for roll left, 1 for roll right
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    /// <summary>Field number for the "jump" field.</summary>
    public const int JumpFieldNumber = 6;
    private bool jump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    /// <summary>Field number for the "boost" field.</summary>
    public const int BoostFieldNumber = 7;
    private bool boost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Boost {
      get { return boost_; }
      set {
        boost_ = value;
      }
    }

    /// <summary>Field number for the "handbrake" field.</summary>
    public const int HandbrakeFieldNumber = 8;
    private bool handbrake_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Handbrake {
      get { return handbrake_; }
      set {
        handbrake_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ControllerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ControllerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Throttle != other.Throttle) return false;
      if (Steer != other.Steer) return false;
      if (Pitch != other.Pitch) return false;
      if (Yaw != other.Yaw) return false;
      if (Roll != other.Roll) return false;
      if (Jump != other.Jump) return false;
      if (Boost != other.Boost) return false;
      if (Handbrake != other.Handbrake) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Throttle != 0F) hash ^= Throttle.GetHashCode();
      if (Steer != 0F) hash ^= Steer.GetHashCode();
      if (Pitch != 0F) hash ^= Pitch.GetHashCode();
      if (Yaw != 0F) hash ^= Yaw.GetHashCode();
      if (Roll != 0F) hash ^= Roll.GetHashCode();
      if (Jump != false) hash ^= Jump.GetHashCode();
      if (Boost != false) hash ^= Boost.GetHashCode();
      if (Handbrake != false) hash ^= Handbrake.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Throttle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Throttle);
      }
      if (Steer != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Steer);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Pitch);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Yaw);
      }
      if (Roll != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Roll);
      }
      if (Jump != false) {
        output.WriteRawTag(48);
        output.WriteBool(Jump);
      }
      if (Boost != false) {
        output.WriteRawTag(56);
        output.WriteBool(Boost);
      }
      if (Handbrake != false) {
        output.WriteRawTag(64);
        output.WriteBool(Handbrake);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Throttle != 0F) {
        size += 1 + 4;
      }
      if (Steer != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (Jump != false) {
        size += 1 + 1;
      }
      if (Boost != false) {
        size += 1 + 1;
      }
      if (Handbrake != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ControllerState other) {
      if (other == null) {
        return;
      }
      if (other.Throttle != 0F) {
        Throttle = other.Throttle;
      }
      if (other.Steer != 0F) {
        Steer = other.Steer;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      if (other.Jump != false) {
        Jump = other.Jump;
      }
      if (other.Boost != false) {
        Boost = other.Boost;
      }
      if (other.Handbrake != false) {
        Handbrake = other.Handbrake;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Throttle = input.ReadFloat();
            break;
          }
          case 21: {
            Steer = input.ReadFloat();
            break;
          }
          case 29: {
            Pitch = input.ReadFloat();
            break;
          }
          case 37: {
            Yaw = input.ReadFloat();
            break;
          }
          case 45: {
            Roll = input.ReadFloat();
            break;
          }
          case 48: {
            Jump = input.ReadBool();
            break;
          }
          case 56: {
            Boost = input.ReadBool();
            break;
          }
          case 64: {
            Handbrake = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Values are in "unreal units"
  /// </summary>
  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Values are in radians
  /// </summary>
  public sealed partial class Rotator : pb::IMessage<Rotator> {
    private static readonly pb::MessageParser<Rotator> _parser = new pb::MessageParser<Rotator>(() => new Rotator());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rotator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotator(Rotator other) : this() {
      pitch_ = other.pitch_;
      yaw_ = other.yaw_;
      roll_ = other.roll_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rotator Clone() {
      return new Rotator(this);
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 1;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 2;
    private float yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private float roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rotator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rotator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pitch != other.Pitch) return false;
      if (Yaw != other.Yaw) return false;
      if (Roll != other.Roll) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pitch != 0F) hash ^= Pitch.GetHashCode();
      if (Yaw != 0F) hash ^= Yaw.GetHashCode();
      if (Roll != 0F) hash ^= Roll.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pitch != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Pitch);
      }
      if (Yaw != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Yaw);
      }
      if (Roll != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Roll);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Yaw != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rotator other) {
      if (other == null) {
        return;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Yaw != 0F) {
        Yaw = other.Yaw;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Pitch = input.ReadFloat();
            break;
          }
          case 21: {
            Yaw = input.ReadFloat();
            break;
          }
          case 29: {
            Roll = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Touch : pb::IMessage<Touch> {
    private static readonly pb::MessageParser<Touch> _parser = new pb::MessageParser<Touch>(() => new Touch());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Touch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Touch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Touch(Touch other) : this() {
      playerName_ = other.playerName_;
      gameSeconds_ = other.gameSeconds_;
      Location = other.location_ != null ? other.Location.Clone() : null;
      Normal = other.normal_ != null ? other.Normal.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Touch Clone() {
      return new Touch(this);
    }

    /// <summary>Field number for the "player_name" field.</summary>
    public const int PlayerNameFieldNumber = 1;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_seconds" field.</summary>
    public const int GameSecondsFieldNumber = 2;
    private float gameSeconds_;
    /// <summary>
    /// Seconds elapsed since the beginning of the game at the time of the touch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameSeconds {
      get { return gameSeconds_; }
      set {
        gameSeconds_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 3;
    private global::Rlbot.Api.Vector3 location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 4;
    private global::Rlbot.Api.Vector3 normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Touch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Touch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerName != other.PlayerName) return false;
      if (GameSeconds != other.GameSeconds) return false;
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (GameSeconds != 0F) hash ^= GameSeconds.GetHashCode();
      if (location_ != null) hash ^= Location.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerName);
      }
      if (GameSeconds != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GameSeconds);
      }
      if (location_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Location);
      }
      if (normal_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Normal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (GameSeconds != 0F) {
        size += 1 + 4;
      }
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Touch other) {
      if (other == null) {
        return;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.GameSeconds != 0F) {
        GameSeconds = other.GameSeconds;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Rlbot.Api.Vector3();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::Rlbot.Api.Vector3();
        }
        Normal.MergeFrom(other.Normal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PlayerName = input.ReadString();
            break;
          }
          case 21: {
            GameSeconds = input.ReadFloat();
            break;
          }
          case 26: {
            if (location_ == null) {
              location_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(location_);
            break;
          }
          case 34: {
            if (normal_ == null) {
              normal_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(normal_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoreInfo : pb::IMessage<ScoreInfo> {
    private static readonly pb::MessageParser<ScoreInfo> _parser = new pb::MessageParser<ScoreInfo>(() => new ScoreInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreInfo(ScoreInfo other) : this() {
      score_ = other.score_;
      goals_ = other.goals_;
      ownGoals_ = other.ownGoals_;
      assists_ = other.assists_;
      saves_ = other.saves_;
      shots_ = other.shots_;
      demolitions_ = other.demolitions_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreInfo Clone() {
      return new ScoreInfo(this);
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "goals" field.</summary>
    public const int GoalsFieldNumber = 2;
    private int goals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goals {
      get { return goals_; }
      set {
        goals_ = value;
      }
    }

    /// <summary>Field number for the "own_goals" field.</summary>
    public const int OwnGoalsFieldNumber = 3;
    private int ownGoals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnGoals {
      get { return ownGoals_; }
      set {
        ownGoals_ = value;
      }
    }

    /// <summary>Field number for the "assists" field.</summary>
    public const int AssistsFieldNumber = 4;
    private int assists_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Assists {
      get { return assists_; }
      set {
        assists_ = value;
      }
    }

    /// <summary>Field number for the "saves" field.</summary>
    public const int SavesFieldNumber = 5;
    private int saves_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Saves {
      get { return saves_; }
      set {
        saves_ = value;
      }
    }

    /// <summary>Field number for the "shots" field.</summary>
    public const int ShotsFieldNumber = 6;
    private int shots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Shots {
      get { return shots_; }
      set {
        shots_ = value;
      }
    }

    /// <summary>Field number for the "demolitions" field.</summary>
    public const int DemolitionsFieldNumber = 7;
    private int demolitions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Demolitions {
      get { return demolitions_; }
      set {
        demolitions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (Goals != other.Goals) return false;
      if (OwnGoals != other.OwnGoals) return false;
      if (Assists != other.Assists) return false;
      if (Saves != other.Saves) return false;
      if (Shots != other.Shots) return false;
      if (Demolitions != other.Demolitions) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Goals != 0) hash ^= Goals.GetHashCode();
      if (OwnGoals != 0) hash ^= OwnGoals.GetHashCode();
      if (Assists != 0) hash ^= Assists.GetHashCode();
      if (Saves != 0) hash ^= Saves.GetHashCode();
      if (Shots != 0) hash ^= Shots.GetHashCode();
      if (Demolitions != 0) hash ^= Demolitions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (Goals != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Goals);
      }
      if (OwnGoals != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OwnGoals);
      }
      if (Assists != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Assists);
      }
      if (Saves != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Saves);
      }
      if (Shots != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Shots);
      }
      if (Demolitions != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Demolitions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Goals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goals);
      }
      if (OwnGoals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnGoals);
      }
      if (Assists != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Assists);
      }
      if (Saves != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Saves);
      }
      if (Shots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Shots);
      }
      if (Demolitions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Demolitions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreInfo other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Goals != 0) {
        Goals = other.Goals;
      }
      if (other.OwnGoals != 0) {
        OwnGoals = other.OwnGoals;
      }
      if (other.Assists != 0) {
        Assists = other.Assists;
      }
      if (other.Saves != 0) {
        Saves = other.Saves;
      }
      if (other.Shots != 0) {
        Shots = other.Shots;
      }
      if (other.Demolitions != 0) {
        Demolitions = other.Demolitions;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            Goals = input.ReadInt32();
            break;
          }
          case 24: {
            OwnGoals = input.ReadInt32();
            break;
          }
          case 32: {
            Assists = input.ReadInt32();
            break;
          }
          case 40: {
            Saves = input.ReadInt32();
            break;
          }
          case 48: {
            Shots = input.ReadInt32();
            break;
          }
          case 56: {
            Demolitions = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
      ScoreInfo = other.scoreInfo_ != null ? other.ScoreInfo.Clone() : null;
      isDemolished_ = other.isDemolished_;
      isMidair_ = other.isMidair_;
      isSupersonic_ = other.isSupersonic_;
      isBot_ = other.isBot_;
      jumped_ = other.jumped_;
      doubleJumped_ = other.doubleJumped_;
      name_ = other.name_;
      team_ = other.team_;
      boost_ = other.boost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Rlbot.Api.Vector3 location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Rlbot.Api.Rotator rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Rotator Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private global::Rlbot.Api.Vector3 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 4;
    private global::Rlbot.Api.Vector3 angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "score_info" field.</summary>
    public const int ScoreInfoFieldNumber = 5;
    private global::Rlbot.Api.ScoreInfo scoreInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.ScoreInfo ScoreInfo {
      get { return scoreInfo_; }
      set {
        scoreInfo_ = value;
      }
    }

    /// <summary>Field number for the "is_demolished" field.</summary>
    public const int IsDemolishedFieldNumber = 6;
    private bool isDemolished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDemolished {
      get { return isDemolished_; }
      set {
        isDemolished_ = value;
      }
    }

    /// <summary>Field number for the "is_midair" field.</summary>
    public const int IsMidairFieldNumber = 7;
    private bool isMidair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMidair {
      get { return isMidair_; }
      set {
        isMidair_ = value;
      }
    }

    /// <summary>Field number for the "is_supersonic" field.</summary>
    public const int IsSupersonicFieldNumber = 8;
    private bool isSupersonic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSupersonic {
      get { return isSupersonic_; }
      set {
        isSupersonic_ = value;
      }
    }

    /// <summary>Field number for the "is_bot" field.</summary>
    public const int IsBotFieldNumber = 9;
    private bool isBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBot {
      get { return isBot_; }
      set {
        isBot_ = value;
      }
    }

    /// <summary>Field number for the "jumped" field.</summary>
    public const int JumpedFieldNumber = 10;
    private bool jumped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Jumped {
      get { return jumped_; }
      set {
        jumped_ = value;
      }
    }

    /// <summary>Field number for the "double_jumped" field.</summary>
    public const int DoubleJumpedFieldNumber = 11;
    private bool doubleJumped_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DoubleJumped {
      get { return doubleJumped_; }
      set {
        doubleJumped_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 12;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 13;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "boost" field.</summary>
    public const int BoostFieldNumber = 14;
    private int boost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Boost {
      get { return boost_; }
      set {
        boost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(ScoreInfo, other.ScoreInfo)) return false;
      if (IsDemolished != other.IsDemolished) return false;
      if (IsMidair != other.IsMidair) return false;
      if (IsSupersonic != other.IsSupersonic) return false;
      if (IsBot != other.IsBot) return false;
      if (Jumped != other.Jumped) return false;
      if (DoubleJumped != other.DoubleJumped) return false;
      if (Name != other.Name) return false;
      if (Team != other.Team) return false;
      if (Boost != other.Boost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (scoreInfo_ != null) hash ^= ScoreInfo.GetHashCode();
      if (IsDemolished != false) hash ^= IsDemolished.GetHashCode();
      if (IsMidair != false) hash ^= IsMidair.GetHashCode();
      if (IsSupersonic != false) hash ^= IsSupersonic.GetHashCode();
      if (IsBot != false) hash ^= IsBot.GetHashCode();
      if (Jumped != false) hash ^= Jumped.GetHashCode();
      if (DoubleJumped != false) hash ^= DoubleJumped.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (Boost != 0) hash ^= Boost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (velocity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Velocity);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AngularVelocity);
      }
      if (scoreInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ScoreInfo);
      }
      if (IsDemolished != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsDemolished);
      }
      if (IsMidair != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsMidair);
      }
      if (IsSupersonic != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsSupersonic);
      }
      if (IsBot != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsBot);
      }
      if (Jumped != false) {
        output.WriteRawTag(80);
        output.WriteBool(Jumped);
      }
      if (DoubleJumped != false) {
        output.WriteRawTag(88);
        output.WriteBool(DoubleJumped);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (Team != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Team);
      }
      if (Boost != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Boost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (scoreInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScoreInfo);
      }
      if (IsDemolished != false) {
        size += 1 + 1;
      }
      if (IsMidair != false) {
        size += 1 + 1;
      }
      if (IsSupersonic != false) {
        size += 1 + 1;
      }
      if (IsBot != false) {
        size += 1 + 1;
      }
      if (Jumped != false) {
        size += 1 + 1;
      }
      if (DoubleJumped != false) {
        size += 1 + 1;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (Boost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Boost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Rlbot.Api.Vector3();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Rlbot.Api.Rotator();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Rlbot.Api.Vector3();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Rlbot.Api.Vector3();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.scoreInfo_ != null) {
        if (scoreInfo_ == null) {
          scoreInfo_ = new global::Rlbot.Api.ScoreInfo();
        }
        ScoreInfo.MergeFrom(other.ScoreInfo);
      }
      if (other.IsDemolished != false) {
        IsDemolished = other.IsDemolished;
      }
      if (other.IsMidair != false) {
        IsMidair = other.IsMidair;
      }
      if (other.IsSupersonic != false) {
        IsSupersonic = other.IsSupersonic;
      }
      if (other.IsBot != false) {
        IsBot = other.IsBot;
      }
      if (other.Jumped != false) {
        Jumped = other.Jumped;
      }
      if (other.DoubleJumped != false) {
        DoubleJumped = other.DoubleJumped;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.Boost != 0) {
        Boost = other.Boost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(location_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Rlbot.Api.Rotator();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 26: {
            if (velocity_ == null) {
              velocity_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 34: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
          case 42: {
            if (scoreInfo_ == null) {
              scoreInfo_ = new global::Rlbot.Api.ScoreInfo();
            }
            input.ReadMessage(scoreInfo_);
            break;
          }
          case 48: {
            IsDemolished = input.ReadBool();
            break;
          }
          case 56: {
            IsMidair = input.ReadBool();
            break;
          }
          case 64: {
            IsSupersonic = input.ReadBool();
            break;
          }
          case 72: {
            IsBot = input.ReadBool();
            break;
          }
          case 80: {
            Jumped = input.ReadBool();
            break;
          }
          case 88: {
            DoubleJumped = input.ReadBool();
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 104: {
            Team = input.ReadInt32();
            break;
          }
          case 112: {
            Boost = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BallInfo : pb::IMessage<BallInfo> {
    private static readonly pb::MessageParser<BallInfo> _parser = new pb::MessageParser<BallInfo>(() => new BallInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BallInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallInfo(BallInfo other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      Velocity = other.velocity_ != null ? other.Velocity.Clone() : null;
      AngularVelocity = other.angularVelocity_ != null ? other.AngularVelocity.Clone() : null;
      Acceleration = other.acceleration_ != null ? other.Acceleration.Clone() : null;
      LatestTouch = other.latestTouch_ != null ? other.LatestTouch.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BallInfo Clone() {
      return new BallInfo(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Rlbot.Api.Vector3 location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::Rlbot.Api.Rotator rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Rotator Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private global::Rlbot.Api.Vector3 velocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "angular_velocity" field.</summary>
    public const int AngularVelocityFieldNumber = 4;
    private global::Rlbot.Api.Vector3 angularVelocity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 AngularVelocity {
      get { return angularVelocity_; }
      set {
        angularVelocity_ = value;
      }
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 5;
    private global::Rlbot.Api.Vector3 acceleration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Acceleration {
      get { return acceleration_; }
      set {
        acceleration_ = value;
      }
    }

    /// <summary>Field number for the "latest_touch" field.</summary>
    public const int LatestTouchFieldNumber = 6;
    private global::Rlbot.Api.Touch latestTouch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Touch LatestTouch {
      get { return latestTouch_; }
      set {
        latestTouch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BallInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BallInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Velocity, other.Velocity)) return false;
      if (!object.Equals(AngularVelocity, other.AngularVelocity)) return false;
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(LatestTouch, other.LatestTouch)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (velocity_ != null) hash ^= Velocity.GetHashCode();
      if (angularVelocity_ != null) hash ^= AngularVelocity.GetHashCode();
      if (acceleration_ != null) hash ^= Acceleration.GetHashCode();
      if (latestTouch_ != null) hash ^= LatestTouch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (velocity_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Velocity);
      }
      if (angularVelocity_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AngularVelocity);
      }
      if (acceleration_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Acceleration);
      }
      if (latestTouch_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LatestTouch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (velocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Velocity);
      }
      if (angularVelocity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AngularVelocity);
      }
      if (acceleration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (latestTouch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LatestTouch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BallInfo other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Rlbot.Api.Vector3();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Rlbot.Api.Rotator();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.velocity_ != null) {
        if (velocity_ == null) {
          velocity_ = new global::Rlbot.Api.Vector3();
        }
        Velocity.MergeFrom(other.Velocity);
      }
      if (other.angularVelocity_ != null) {
        if (angularVelocity_ == null) {
          angularVelocity_ = new global::Rlbot.Api.Vector3();
        }
        AngularVelocity.MergeFrom(other.AngularVelocity);
      }
      if (other.acceleration_ != null) {
        if (acceleration_ == null) {
          acceleration_ = new global::Rlbot.Api.Vector3();
        }
        Acceleration.MergeFrom(other.Acceleration);
      }
      if (other.latestTouch_ != null) {
        if (latestTouch_ == null) {
          latestTouch_ = new global::Rlbot.Api.Touch();
        }
        LatestTouch.MergeFrom(other.LatestTouch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(location_);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              rotation_ = new global::Rlbot.Api.Rotator();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 26: {
            if (velocity_ == null) {
              velocity_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(velocity_);
            break;
          }
          case 34: {
            if (angularVelocity_ == null) {
              angularVelocity_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(angularVelocity_);
            break;
          }
          case 42: {
            if (acceleration_ == null) {
              acceleration_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(acceleration_);
            break;
          }
          case 50: {
            if (latestTouch_ == null) {
              latestTouch_ = new global::Rlbot.Api.Touch();
            }
            input.ReadMessage(latestTouch_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoostInfo : pb::IMessage<BoostInfo> {
    private static readonly pb::MessageParser<BoostInfo> _parser = new pb::MessageParser<BoostInfo>(() => new BoostInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoostInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoostInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoostInfo(BoostInfo other) : this() {
      Location = other.location_ != null ? other.Location.Clone() : null;
      isActive_ = other.isActive_;
      timer_ = other.timer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoostInfo Clone() {
      return new BoostInfo(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private global::Rlbot.Api.Vector3 location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.Vector3 Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 2;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "timer" field.</summary>
    public const int TimerFieldNumber = 3;
    private int timer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timer {
      get { return timer_; }
      set {
        timer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoostInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoostInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Location, other.Location)) return false;
      if (IsActive != other.IsActive) return false;
      if (Timer != other.Timer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (location_ != null) hash ^= Location.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (Timer != 0) hash ^= Timer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (location_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Location);
      }
      if (IsActive != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsActive);
      }
      if (Timer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Timer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (location_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Location);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (Timer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoostInfo other) {
      if (other == null) {
        return;
      }
      if (other.location_ != null) {
        if (location_ == null) {
          location_ = new global::Rlbot.Api.Vector3();
        }
        Location.MergeFrom(other.Location);
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.Timer != 0) {
        Timer = other.Timer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (location_ == null) {
              location_ = new global::Rlbot.Api.Vector3();
            }
            input.ReadMessage(location_);
            break;
          }
          case 16: {
            IsActive = input.ReadBool();
            break;
          }
          case 24: {
            Timer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      secondsElapsed_ = other.secondsElapsed_;
      gameTimeRemaining_ = other.gameTimeRemaining_;
      isOvertime_ = other.isOvertime_;
      isUnlimitedTime_ = other.isUnlimitedTime_;
      isRoundActive_ = other.isRoundActive_;
      isKickoffPause_ = other.isKickoffPause_;
      isMatchEnded_ = other.isMatchEnded_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "seconds_elapsed" field.</summary>
    public const int SecondsElapsedFieldNumber = 1;
    private float secondsElapsed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SecondsElapsed {
      get { return secondsElapsed_; }
      set {
        secondsElapsed_ = value;
      }
    }

    /// <summary>Field number for the "game_time_remaining" field.</summary>
    public const int GameTimeRemainingFieldNumber = 2;
    private float gameTimeRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GameTimeRemaining {
      get { return gameTimeRemaining_; }
      set {
        gameTimeRemaining_ = value;
      }
    }

    /// <summary>Field number for the "is_overtime" field.</summary>
    public const int IsOvertimeFieldNumber = 3;
    private bool isOvertime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOvertime {
      get { return isOvertime_; }
      set {
        isOvertime_ = value;
      }
    }

    /// <summary>Field number for the "is_unlimited_time" field.</summary>
    public const int IsUnlimitedTimeFieldNumber = 4;
    private bool isUnlimitedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlimitedTime {
      get { return isUnlimitedTime_; }
      set {
        isUnlimitedTime_ = value;
      }
    }

    /// <summary>Field number for the "is_round_active" field.</summary>
    public const int IsRoundActiveFieldNumber = 5;
    private bool isRoundActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRoundActive {
      get { return isRoundActive_; }
      set {
        isRoundActive_ = value;
      }
    }

    /// <summary>Field number for the "is_kickoff_pause" field.</summary>
    public const int IsKickoffPauseFieldNumber = 6;
    private bool isKickoffPause_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKickoffPause {
      get { return isKickoffPause_; }
      set {
        isKickoffPause_ = value;
      }
    }

    /// <summary>Field number for the "is_match_ended" field.</summary>
    public const int IsMatchEndedFieldNumber = 7;
    private bool isMatchEnded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMatchEnded {
      get { return isMatchEnded_; }
      set {
        isMatchEnded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecondsElapsed != other.SecondsElapsed) return false;
      if (GameTimeRemaining != other.GameTimeRemaining) return false;
      if (IsOvertime != other.IsOvertime) return false;
      if (IsUnlimitedTime != other.IsUnlimitedTime) return false;
      if (IsRoundActive != other.IsRoundActive) return false;
      if (IsKickoffPause != other.IsKickoffPause) return false;
      if (IsMatchEnded != other.IsMatchEnded) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SecondsElapsed != 0F) hash ^= SecondsElapsed.GetHashCode();
      if (GameTimeRemaining != 0F) hash ^= GameTimeRemaining.GetHashCode();
      if (IsOvertime != false) hash ^= IsOvertime.GetHashCode();
      if (IsUnlimitedTime != false) hash ^= IsUnlimitedTime.GetHashCode();
      if (IsRoundActive != false) hash ^= IsRoundActive.GetHashCode();
      if (IsKickoffPause != false) hash ^= IsKickoffPause.GetHashCode();
      if (IsMatchEnded != false) hash ^= IsMatchEnded.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SecondsElapsed != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SecondsElapsed);
      }
      if (GameTimeRemaining != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GameTimeRemaining);
      }
      if (IsOvertime != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsOvertime);
      }
      if (IsUnlimitedTime != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsUnlimitedTime);
      }
      if (IsRoundActive != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRoundActive);
      }
      if (IsKickoffPause != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsKickoffPause);
      }
      if (IsMatchEnded != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsMatchEnded);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SecondsElapsed != 0F) {
        size += 1 + 4;
      }
      if (GameTimeRemaining != 0F) {
        size += 1 + 4;
      }
      if (IsOvertime != false) {
        size += 1 + 1;
      }
      if (IsUnlimitedTime != false) {
        size += 1 + 1;
      }
      if (IsRoundActive != false) {
        size += 1 + 1;
      }
      if (IsKickoffPause != false) {
        size += 1 + 1;
      }
      if (IsMatchEnded != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.SecondsElapsed != 0F) {
        SecondsElapsed = other.SecondsElapsed;
      }
      if (other.GameTimeRemaining != 0F) {
        GameTimeRemaining = other.GameTimeRemaining;
      }
      if (other.IsOvertime != false) {
        IsOvertime = other.IsOvertime;
      }
      if (other.IsUnlimitedTime != false) {
        IsUnlimitedTime = other.IsUnlimitedTime;
      }
      if (other.IsRoundActive != false) {
        IsRoundActive = other.IsRoundActive;
      }
      if (other.IsKickoffPause != false) {
        IsKickoffPause = other.IsKickoffPause;
      }
      if (other.IsMatchEnded != false) {
        IsMatchEnded = other.IsMatchEnded;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            SecondsElapsed = input.ReadFloat();
            break;
          }
          case 21: {
            GameTimeRemaining = input.ReadFloat();
            break;
          }
          case 24: {
            IsOvertime = input.ReadBool();
            break;
          }
          case 32: {
            IsUnlimitedTime = input.ReadBool();
            break;
          }
          case 40: {
            IsRoundActive = input.ReadBool();
            break;
          }
          case 48: {
            IsKickoffPause = input.ReadBool();
            break;
          }
          case 56: {
            IsMatchEnded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameTickPacket : pb::IMessage<GameTickPacket> {
    private static readonly pb::MessageParser<GameTickPacket> _parser = new pb::MessageParser<GameTickPacket>(() => new GameTickPacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTickPacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Rlbot.Api.GameDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTickPacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTickPacket(GameTickPacket other) : this() {
      players_ = other.players_.Clone();
      playerIndex_ = other.playerIndex_;
      boostPads_ = other.boostPads_.Clone();
      Ball = other.ball_ != null ? other.Ball.Clone() : null;
      GameInfo = other.gameInfo_ != null ? other.GameInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTickPacket Clone() {
      return new GameTickPacket(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Rlbot.Api.PlayerInfo> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Rlbot.Api.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Rlbot.Api.PlayerInfo> players_ = new pbc::RepeatedField<global::Rlbot.Api.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rlbot.Api.PlayerInfo> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "player_index" field.</summary>
    public const int PlayerIndexFieldNumber = 2;
    private int playerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerIndex {
      get { return playerIndex_; }
      set {
        playerIndex_ = value;
      }
    }

    /// <summary>Field number for the "boost_pads" field.</summary>
    public const int BoostPadsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Rlbot.Api.BoostInfo> _repeated_boostPads_codec
        = pb::FieldCodec.ForMessage(26, global::Rlbot.Api.BoostInfo.Parser);
    private readonly pbc::RepeatedField<global::Rlbot.Api.BoostInfo> boostPads_ = new pbc::RepeatedField<global::Rlbot.Api.BoostInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Rlbot.Api.BoostInfo> BoostPads {
      get { return boostPads_; }
    }

    /// <summary>Field number for the "ball" field.</summary>
    public const int BallFieldNumber = 4;
    private global::Rlbot.Api.BallInfo ball_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.BallInfo Ball {
      get { return ball_; }
      set {
        ball_ = value;
      }
    }

    /// <summary>Field number for the "game_info" field.</summary>
    public const int GameInfoFieldNumber = 5;
    private global::Rlbot.Api.GameInfo gameInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Rlbot.Api.GameInfo GameInfo {
      get { return gameInfo_; }
      set {
        gameInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTickPacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTickPacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (PlayerIndex != other.PlayerIndex) return false;
      if(!boostPads_.Equals(other.boostPads_)) return false;
      if (!object.Equals(Ball, other.Ball)) return false;
      if (!object.Equals(GameInfo, other.GameInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (PlayerIndex != 0) hash ^= PlayerIndex.GetHashCode();
      hash ^= boostPads_.GetHashCode();
      if (ball_ != null) hash ^= Ball.GetHashCode();
      if (gameInfo_ != null) hash ^= GameInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
      if (PlayerIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerIndex);
      }
      boostPads_.WriteTo(output, _repeated_boostPads_codec);
      if (ball_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Ball);
      }
      if (gameInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(GameInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (PlayerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerIndex);
      }
      size += boostPads_.CalculateSize(_repeated_boostPads_codec);
      if (ball_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ball);
      }
      if (gameInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTickPacket other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      if (other.PlayerIndex != 0) {
        PlayerIndex = other.PlayerIndex;
      }
      boostPads_.Add(other.boostPads_);
      if (other.ball_ != null) {
        if (ball_ == null) {
          ball_ = new global::Rlbot.Api.BallInfo();
        }
        Ball.MergeFrom(other.Ball);
      }
      if (other.gameInfo_ != null) {
        if (gameInfo_ == null) {
          gameInfo_ = new global::Rlbot.Api.GameInfo();
        }
        GameInfo.MergeFrom(other.GameInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 16: {
            PlayerIndex = input.ReadInt32();
            break;
          }
          case 26: {
            boostPads_.AddEntriesFrom(input, _repeated_boostPads_codec);
            break;
          }
          case 34: {
            if (ball_ == null) {
              ball_ = new global::Rlbot.Api.BallInfo();
            }
            input.ReadMessage(ball_);
            break;
          }
          case 42: {
            if (gameInfo_ == null) {
              gameInfo_ = new global::Rlbot.Api.GameInfo();
            }
            input.ReadMessage(gameInfo_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
